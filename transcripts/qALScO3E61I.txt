i am a massive massive massive fan of
command lines i think is it it's such an
underrated skill set i think if you if
you're looking to get into any text any
like tech engineering focus role um
especially cloud computing you're going
to do yourself with this service if you
are not comfortable with a command
or a command line right command line um
so let's dive into this theory for it's
real quick before we actually get like
into the commands right so what is a
command line interface oftentimes you'll
see this or no actually always you'll
see this shortened to cli so you hear
things like azure cli docker cli and
things like that um so anyway command
line interface cli it is a text based
program that allows us to perform
actions via commands and oftentimes
you'll hear sometimes you'll hear like a
command line
bash shell terminal these terms like mix
in so someone maybe try r
maybe they're talking about like
a com i don't know
a command line when they're really
referencing like a terminal but this is
why i'm trying to summarize it's the
easiest way i can so command line
interface uh be a text-based program
where we can perform actions via
commands right
and that's like stuff like azure cli um
i can do like azure help this is how i
could work with azure um there's also
like dockeruh press spell right yeah correct docker
things like that right so and then
almost any cloud service that you work
with is going to have a cli it's
basically a way to work with something
via these commands via
this thing you hear right
what is a shell
so i think people get a little confused
between like cli and shell the most
and shell is a program that allows us to
run commands and if those commands are
built into the shell themselves you can
run those or it's a way to actually run
your clies right so i have i'm using a
bash shell right and i can use this to
execute my azure commands my docker
commands my kubernetes commands whatever
cli it is that i'm working with right
when it comes to unix systems so linux
mac os things like that right
there are many different unix shells but
they all derive features from the born
shell which is the it's sh for short
right
um
and you know that's what we're going to
be working with today right
what is a
terminal okay so a terminal often
times you know so you'll say terminal or
you say console so terminal is the the
program the sort of thing that we use to
access a shell to run a shell to run
commands so the gui part so this program
for example windows terminal i have open
here on the left side this is a terminal
sometimes there's also console which i
think consoles is more like the physical
like there's actually a physical thing
that i can touch to access these
commands right
um but these days it's more of like
a ui so windows terminal there's there's
quake that i've used a lot on like
ubuntu popos item 2 i think is one of
the most popular ones for um mac
things like that right
and uh let's talk about a shell script
okay scripting everyone knows scripting
is a very very important skill set um
and what exactly is a shell script so
essentially it's a text file that can
contains a sequence of shell commands it
will write our commands in there and
we'll write one towards the end um and
we can execute them we'll execute the
the script itself instead of having to
do the individual commands because the
commands are inside of the text file
right oh last thing here what is bash so
like i mentioned
the born shell is sort of like the
og
shell that was available for unix
systems that is available for unix
systems
but you know linux has
many many many many many many flavors of
linux and many many flavors of shells
and there's one called bash
bash stands for born
again shell so you know b
a and then sh shell so that's where you
get bashful
and it's become sort of the de facto
like the standard for for working with
linux machines linux service and when
you think about cloud computing servers
you know
linux servers like network together
that's essentially what cloud computing
is right yes there's all these
serverless service services and
serverless things but under the hood
everything is pretty much
linux servers right so when you think of
bash um you can almost consider it sort
of like this
the universal language because you can
expect it to be at this point where
we're in 2022 you can expect it to be
available for you on a linux server
without you having to install something
so you know you don't install python you
don't install.net or anything like that
right it's like on there and if you've
got some skills you can like spin up a
server and not have to do anything
because you can already like interact
with it via a command right or command
line
right
uh okay cool cool cool let's let's dive
into some fundamentals so yeah i'm using
windows terminal i'm actually using wsl
and i have ubuntu uh setup you see i
have powershell here i have the azure
clouds too i have git bash ubuntu um you
can also access a shell if you go to
like shell.azure.com
and then
this is like a cloud shell
and you have the option to use
powershell or or bash we're obviously
going to be using bash here i'm going to
stick with the windows terminal one just
because i've created some files zero
date that we're going to be working with
but if you don't necessarily want to
install something locally
and you can use you know your azure
account to access this uh pretty neat
right
okay cool
so let's run through the full syntax of
a bash command right so so let's list
out i have an example here so this ls
here
uh dash and i'll explain it all we'll
we'll piece it apart so the first part
here is you know we have command
we have options and then we have
arguments
and sometimes you can run commands just
on their own sometimes there's a
required argument sometimes um you know
you need to provide the command
something for it to do it can't just
work on its own sometimes it doesn't
need anything
and you also have this concept of
options which are also referred as you
know flags
and whenever you have like a dash a
letter or something like that or dash a
word that's considered an option or a
flag
and they modify how commands work so in
this case i have ls dash a and then
slash at c
uh directory so the ls is the command
itself this stands for
essentially listing the contents of the
argument that we provide here and by
default it will just list the
the contents of the current directory
that you're in
and then we have the dash a which is an
option
uh which includes hidden files in linux
anything that's soft starts with a dot
whether that be a file or directory
is considered hidden so when you do a
normal ls without the dash a here and
i'll show you all this i'm just trying
to explain it beforehand right you're
going to get um the hidden files as well
right
so if we do ls a here
we can see here we get a bunch of stuff
that's in the etsy directory so
essentially we're telling all right
linux
can you list
everything that is in this directory
here
including the hidden files and you see
we have
some hidden files here
and if i remove
the dash a
uh there we go here we don't get the
ones that start with the dots right
but where do we go here see so we don't
get those one
okay so essentially that's how you have
commands you have your arguments and
then you have options that you can
provide
and you can combine options or flags
things like that with uh you know just
instead of doing it slash
l
a a
c like this and the dash l stands for
it's like a formatting thing i don't
exactly know maybe it stands for like
dash long or something like that um so
instead of doing them individually we
can just do
dash uh we can do it like a stash
la slash etsy right things like that
okay and when it comes to
like sort of keeping things um
concise
this is where like
bash enthusiasts or people who are
really great at bash
tend to like flex their skills
because there are some really really
really impressive combinations of
commands out there that you can just
spend your sort of your career working
with bash and like you know 20 years in
you'll discover like i had no idea that
you could combine things like that right
um it's quite
it's like an art to an extent like
working with a term with commands and
command line and terminal things like
that right
okay cool so yeah we know we can combine
it and then we mentioned here uh
combined and then the long form right
now keep in mind you're going to want to
use the long form when you're putting
things in scripts because it's easier to
read but if you're doing just one-off
commands it's easier to use something
combined a little bit more concise right
but now you might be asking when there's
all these commands there's all these
arguments you know and and
you know i could probably like learn
like you know the list change directory
print working directory man command all
these kinds of things the ones that you
use the most but you know all these
maybe have like several options and
arguments to them how am i supposed to
know what to do and my friend that is a
fantastic question
because oh come on i want to install
these drivers sorry
because understanding how to read
documentation and how to find help for
the commands that you are
working with is very very important
luckily
linux has a built-in
documentation or manual for lack of a
better word uh that's called men men for
sure right so uh here we have sort of
man and then we just i provided a
command here
man make oh can we go
large screen i don't know why it went
small one second there we go thank you
um
so how do we access this well we provide
the man command and as an argument we're
providing another command
let's say man i don't know make dear
which is the make directory
and you see we getour the name of the command make deer
stands for make directories a synopsis
which is like a one-liner of how to use
it make deer options and then directory
and then description it tells create the
directory or directories
if they do not already exist
and then it tells us some arguments some
options and things like that right
fantastic so we know how to access
command and there's a lot in here right
you can read a bunch about this um some
commands will have more some will have
less and things like that right
so that's how you access help now become
very very familiar if you're if you are
trying to figure out you know how to
work with a command you don't remember
an argument things like that i highly
highly highly recommend that your first
go to would be
the man option the manual page and then
you know go you know google or do
whatever searches you need to do
um because this documentation is
available to you in bash right available
and anywhere you're working that has
bash available
another neat option for help is the dash
dash help syntax here i can probably
make this a little bigger here this
syntax here the cool thing about using
this is it's a little bit more concise
so if i do make deer
shell
you see this is a lot it's a lot shorter
it almost gives you sort of like a
summary
sometimes the information that you're
looking for might not be here right but
essentially its goal is to have sort of
like oh the most like important
information extracted from man
now what i really like about using this
dash dash help option
is
when you're working with other clies
it's sort of a standard that you can use
dash dash help to help you figure these
you know commands out in other clies
when you're not working necessarily with
bash commands for example if i use the
if i'm new to azure and i want to use
the azure cli which is a z you'll have
to install it of course but then you can
use az
and i'm like all right i know i know i
can access the azure cli using az but
like i don't know anything else right so
i can provide
help
and then we get a list of help things
right
it's still on us here
we got here uh all right we can work
with openshift we can use app config we
can work with groups uh we can work with
uh you know a bunch of things in this
list too all right so say i find the
option the command that i want to work
with i want to work with az account
but i don't know anything else well i
can continue to provide the dash dash
helper and it will continue to give me
the documentation that is specific to
that chain of commands so this isn't the
documentation to a z cli this is the
documentation to easy account specific
to that and now great i see a z
i don't know what i want to do like easy
account like oh i say i see list here so
if i do a z account list all right i
have a better idea what i want to do but
i still don't know exactly i can provide
help once more and it's again
documentation specific to that
command right and this is great and this
is the same for like if i wanted to work
with a docker uh cli
help and then i get
documentation relevant to that right and
this is all built into these clies like
the documentation itself is up to the
you know
i guess projects or companies that
create these clies like they have to
keep up to date and you know make sure
they provide great um documentation uh
access to the other help the cool thing
about like for example the azure one
azure i don't know vm
help is like sometimes they'll give you
examples as well like you can find it
says here for more specific examples use
azvm like if i did
a zvm create
help i'm pretty sure it's going to give
me some examples of like create multiple
vms with this command create a vm in an
availability zone with this command and
things like that which when you're
getting started and you don't know how
to put these things together you can
just copy and kind of work with it right
so that's the good part about that so
all right we know how to get help things
like that we know how to get help with
other clients and stuff like that let's
talk a little bit about wild cards
sometimes called
meta characters
though i don't think i've ever heard
meta characters um i've always usually
heard wild cards but anyway
wild cards are symbols that represent
one or more characters in bash commands
right so for example
when you're providing a command
or
sometimes you're
looking for something or you want to
work with something that you're not 100
sure
with the name of it or the extension or
something like that right
and it would be impossible for you to
even know where to start because you
don't know the full name
that's where wild cards come into place
so for example if we use the asterisks
it represents 0 or a sequence of
characters 0 or more essentially
characters
when you utilize it so for example i
have here
i have here a bunch of files i've got
this one.png i got an output txt i got a
nano txt in uh text file i got pick one
that's a png a pic3 that's a capital jpg
i don't know what the difference is
there i got a j p e g there's another
extension there too right so i have a
bunch of files in here too
um
what if i only wanted to list the files
that ended in png i don't care what the
names actually are i'm just looking for
the ones that end in.png
keep in mind that extensions and linux
is a little different so um unlike other
operating systems linux doesn't really
care for the extensions of files it's
not that they don't matter it's like it
linux sort of assumes the extension via
the contents of the file instead of
actually relying on the extension itself
so you could name a png file like
anything else it still would know that
it's a png but for this example it's
like really helpful to like play around
with wild cards when we talk about
extension so that's why i'm using it
okay
uh all righty uh so yes we're talking
about the ash the asterix wildcard here
so if i wanted to find the png files i
could simply do ls
asterisk.png
and it would show me only the ones that
end in png let me let me do a dash l
there dash l there we go only the ones
that ended not p and g and now sometimes
i see people sort of get confused
because this asterisk is though it's
just one symbol you might think that oh
it just means like one place like one
letter like one character but no
remember it's zero or more characters
right so that's why it's giving me you
know this one has one before the dot png
this one has four letters and then this
one has a whole bunch more and they
still sort of meet that requirement
right
but what if we were looking for
files that only represent a single
or like a character like a single
character right then for that we could
use a question mark
so let's list out these files again and
see what we're looking for so say we're
only looking for
uh files that are n in png and that have
just one digit
uh you know what we'll probably have to
create another one so if i do pick
one two three dot png
i'm using the touch command i don't know
if we have the touch command in the list
of commands i'm going to go over touch
is essentially made to modify a creation
date of a file but it's often used as
well to like create a new file um just a
little fun fact there okay so
uh let's do ls again
listen long here and now we have uh pick
one png peak one two three pick three
pick you know things like that right but
say i wanna wanted to find files that
have pick one digit
or one character and then dot png
well i could do here ls
and then the character the question mark
here where am i right here this one here
uh one
pick actually one dot
png correct here we go
you see we're only getting this single
one here because only this one
fits
what we're looking for right and so just
understand like the question mark is the
the one character single character not
more not zero one is specific there too
uh we can also use brackets to denote a
group of characters so say we're looking
for all the ones that have dot j or dot
p right and then for that we could use
ls
and then asterisk because we any it can
have any sequence we don't know what the
name is then it's going to have a dot
and then it's going to either be a j or
a p
and then it's going to have more letters
after that and we have a bunch here
let's do an ls
l here fantastic we have all of these
here too uh but do keep in mind that for
example if we do lss l here now we have
this capital one here we got these txts
in here but you might ask all right
we're looking for j and p but this
capital one j didn't come in there
and you are right my friend bash
commands are case sensitive so in that
case if you're looking for it to include
all of those we would have to do a
capital
j as well here and then a lower capital
p there if we wanted to and then we
would get the ones with the capital
right so keep in mind kane's case
sensitive right
as most things are when you're working
with uh scripting programming things
like that right
oh and could also represent a range with
brackets we would have to use the dash
for that so if i did ls
like just list
a through zwe'd have everything there and if we
wanted to just the ones that have
capital
[Music]
a through z
oh hold on here we probably have to do
this a little different here
so it starts with anything and then it
has an extension that's a capital letter
you could probably do it like that and
then text after that and then we'd have
the capital one two right so range
ranges can be
supplied via
a bracket and then these
dash okay
okay cool so those are wild cards we're
going to use that
a little bit more uh when we use grep
filtering and things like that um
man man make deer works but no luck no
luck with make deer help ah that is a
good call out some of them will not so
some commands won't have man some
commands won't have dash help this is
great so for example the cd command is
here so if you do man cd you're not
gonna find cds change directory we'll
cover this in a little bit uh no manual
and you see here it says no manual entry
for cd that's because you'll have to do
man built in because cd is it's
like an exception to an extent it's a
built-in command it's not necessarily
like a bash command it's more specific
to like your environment per se
uh but if we do man built-ins and then
we like search for cd if you do slash um
forward slash in-man you can search uh
and then we see we have the cd command
here and then it's just you know you'll
have to search for it and find more
information of it
uh but yes
that is true sometimes there isn't a man
entry sometimes there's a dash of help
um so you'd have to like go back and
forth in that um but for the majority of
them there it is available okay where
were we at all right so we've been
playing around with the ls you know we
can list commands and like i mentioned
some of the popular options are dash a
to include hidden files and directories
and dash l to include more info about
each file which you know we get um
ls.l here we get uh permissions here uh
we get uh uh who's the owner
the group uh and things like that
creation date the
file name and that kind of stuff right
um then we have the pw command which is
print working directory this command
will output where we're at right now
right i mean my terminal tells us right
here but in case
i needed it to save to a variable or
something like that i could use pwd
which stands for print working directory
cat uh cat stands for concatenate let me
make this
we're on this one here at the moment
right i could probably make this a
little
right here here here we go okay
cat stands for concatenate file or files
to standard output we're going to talk
about standard input standard output
standard error in a little bit but it's
a fancy way of saying display the
contents of a file to the screen
um
so let me i don't know let's make a file
let's let's use nano shadow total any
nano fans are we uh are we nano versus
vim versus vi kind of people here and i
i try to use whatever i remember at the
current moment right so we're gonna
create a file called hello uh nano
that dxd unless i already have one i
don't remember if i have one or not uh
we're gonna say hello
nano
fans right and then we're gonna just
uh
save that there fantastic and then if i
do cat which is the concatenate and then
provide the file for the
the name of the file that we just
created we'll see that it prints out the
contents of the file so that's what we
would use
cat for
we went over
uh man already uh we went over cd which
is oh actually i don't think we did cd
will change directories so if i
uh want and i mentioned oh look i wrote
it here too i did not remember that it
did
if we needed help with the cd command
you have to search for it in the man the
built-ins manual uh page okay
uh if we wanted to move up we'll go this
way right and it looks like i want a
folder back so remember when we think of
like a file system um it's it's like a
tree right so if we wanted to move up
we're like essentially moving out of the
folder right and then if we wanted to go
home we could use the tilde here i don't
want to go home
i want to go back into
this file uh this folder actually bash
demo files here right so that's how the
cd is how like how you move around right
right
make deer make deer is for us to create
a directory create a folder right so i
can do make deer
um i don't know let's say
there one and then if i ls you can see i
have this dear one here
i can also do make near dash p which is
one of the popular arguments to pat or
options to pass with make deer and that
will allow us to create like
subdirectories so if i do tier 2 slash
sub year 1
now i do ls you can see ls-l i think
this one will show we'll save
2 has this here too so if i go
ls gear 2 it might be able to show us
here and we have we're printing the
contents of tier 2 which is the
subdirectory tool so pretty handy to
know when you need to create
subdirectories when you're working with
the make to your command
all right where are we at okay removed
here
removed here is for us to
delete empty directories delete empty
folders so since that uh dear one we
didn't create anything in it we should
be able to just do remove tier one
fantastic but if i try to do the same
with dear what was the other one i think
we called the dear two
you call it beer two goodness where is
my yeah it's youtube so if i do remove
dear dear too
we're gonna get an error
it's telling us failed to remove dr2
direct
directory not empty and that's because
we have another folder even though the
folder has nothing in it it's still not
considered empty right
so that is where our remove command
comes in handy which is just the rm here
all right
uh so let me actually see we got here so
i'm gonna actually delete a bunch of
stuff so if i do for example rm
and then i say one dot png
and we see we got rid of that too right
uh and i actually want to remove
anything that starts with pick and then
end with literally anything else right
and then i remove the bunch there so you
see how the usage of like wild cards i
just used that astrix and i got rid of a
bunch of
files that i didn't want and i also
don't want any of these text files so i
could probably remove
anything and that ends with txt and then
you see the only thing i have left is
this directory right so yeah getting
comfortable using wildcards and commands
it's going to make you much more
efficient a lot quicker also when you're
working with commands right so anyway i
was like i was saying how do we remove
this directory that has things in it
well
you should make it a habit to use rm
dash
i which means it's going to ask us to be
prompted every time it's going to prompt
us every time we need to remove
something
and then we can use r which is
recursively so we can combine these two
and do ri recursively means it's going
to like go from subdirectory back up
right which matters because we have a
subdirectory in here too and then we're
going to provide the name of the
directory
oh how do we call this oh it's tier 2.
up here we go dear 2.
and here it says descendants into
directory 2. i'm going to hit yes remove
directory gear 2 sub gear 1 and then hit
yes and then finally it's saying remove
directory 2 yes and this is just you
know
cover our behinds to make sure we don't
delete something that we don't need to
delete all right
click now what do we got here all right
finally oh copy files okay so for this
uh pretty simple it's like kind of like
right-click copy but uh let's make a
couple of files here we'll make a
i don't know here notes one txt
and then we'll make a directory we'll
call this directory1 and then if i copy
notes
uh notes
copy notes 1
txt dear one like that
and then i do ls dear one you can see
that notes has been copied from
its existing place so it's still it's
still here it's it's
still in this bash demo files directory
but we've also copied it over to
the um
dear one directory right so very handy
there's also move
so
if i did
hold on let's go into dr1 and then
remove notes
right and then we'll go back
clear this and then if i did move notesnotes there we go two deer one
you see we no longer have notes there so
we can copy we can move depending on
what you want to do right and then we
can move all all that jazz
alrighty uh we got ps which is used to
get a snapshot of all currently running
processes we're gonna do exercise with a
little bit more of this um
in a little bit right so essentially if
i put ps it's just going to show me the
processes that are running at the moment
we have the z shell moving in here and
then we got ps as well too um
all right fantastic um
sudo so sudo stands for super user do
and when you're probably gonna hear this
this um
[Music]term word super user uh it's ref it
means
the root user right so the user that has
the most privilege on on the on the
system
and there are there are oftentimes
commands that you need to run with sudo
so for example if you want to like
update uh your
just show your machine you would use
apt-get update but you can see i'm
getting here permission denied but if i
do sudo
apt get update then i should be able to
provide the password to the account
and then go ahead and update my uh
machine
and
there are a bunch of reasons why you
would want to use sudo instead of
logging into root for example i've got a
few uh specified here so if you run
stuff as root you're not going to have a
record of
people who are running these the
accounts that are running these commands
in the first place you also don't have
access to your normal shell environment
right
and most distros are going to use this
pseudo package and allows us to run
commands as root though we're still
ourselves right so i'm still made by gps
but i'm running as root
um
so keep that in mind too and we would
preface the command with sudo and that's
how we would do stay super user do this
command right essentially that's what
it's telling recursively means we're
like sort of going into the sub
directories and then moving like we're
like looping through that and then we'll
go through the directory above it and
then above like that right recursively
yes here we go perfect that's it means
the command will go below the current
directory exactly there we go perfect
right so we'll go into the folder figure
all the subdirectories out and then move
our way up into uh whatever the command
it is that we provided right so
redirection now this is where you can
really start understanding the power of
the command line embrace the power of a
pipeline and pipelines are essentially
put together by commands and using
redirection right don't worry we'll get
into this right
so input output direction allows us to
redirect input and output of commands to
and from places files
as well as connect multiple commands
together into a pipeline so as a summary
where we have to use this symbol here
for rigging directing input to a source
other than the keyboard
this symbol here the greater than for
redirecting output to destination other
than this screen
if we wanted to append we would have to
use two of these here
um so instead of overriding which is
with the default when you're redirecting
standard output
you can append and then we use the pipe
symbol or
character
for piping output from one command to
the input of another okay
there's a little bit of summary but
we'll do some examples here so
redirecting standard output
zener output also known as st out
this right here is the program's result
so what you see sort of printed out on
the screen so when i do
like ls here this
what's here this is what's printed out
it's known as standard output
to redirect this content so the content
of like what gets printed what gets
shown
to a file instead of like default to the
screen we can use the greater than
symbol this might have a better name for
it i know it is greater than it might
have a different name
but it's also redirection operator
the standard output redirection operator
and the name of the file right so for
example if we wanted to
say get the
contents that is in the
uh here i've got the
slash user slash bin which is sort of a
directory where like process like
scripts and binaries and stuff gets
saved to to a file called
ls.ls-output.tathen
we could do this command so we'll do ls
dash l so we'll get the long form of the
content
from user bin
and go ahead and redirect that output
don't send it to the screen
send it to this file called
ls-output.txt if this file doesn't exist
it'll create it for us if it does exist
it's going to get overwritten right so
let's hit that and you see nothing
printed out to the screen but if i use a
good old cat command here and i provide
in the file name you're going to see
that
it is now the contents of this file
clear
it up too okay cool and if you wanted to
append you would use the
this one here instead of the other one
right
uh how do we redirect standard error so
standard error error messages like for
example when i got that permission
denied message that would uh be like
standard error um it's also known as std
error
[Music]
we have to use its file descriptor so in
order to do this uh the shell references
a standard out sd out stdn and scd error
internally with its file descriptors so
zero one and two right so zero you know
respectively zero would be sdl one would
be st in and then two would be std er
right
so we can redirect the standard error uh
to uh you know some sort of file or
something like that
with the
uh this notation here right
so for example if i had some sort of
error
um
we could just do like we'll just do the
command that's in here ls dash
l slash bin slash user
and then we do two because it's standard
err ls-er
dot txt and then since uh then we'll do
cat
ls
error here and then we see cannot access
this location this is the contents of
that because it doesn't exist right so
purposely we did something that was
incorrect right uh but you see that when
we did that we didn't get the output to
the screen because it was redirected to
this file right clear
uh all right i'm trying to like skim
through this again these these links
will be available for you to like
reference later um but yeah if you
wanted to sort of redirect standard
output in standard error it's one file
you could use there's i think there's
two ways to do this yeah so in like
older systems you would have to use like
the redirection
right and then at the end you would add
two and redirect to one as well so
remember those are the file descriptors
uh but in the newer ones you can just
use this ampersand and it'll redirect it
to just keep in mind that in order like
the order of the right directions matter
uh standard error must always occur
after redirecting standard output okay
cool
uh and finally standard input so
standard input typically with like you
know commands will be a keyboard
um
in in order to like i don't know like
grab the the content from somewhere else
like if you're not using a keyboard you
could send it like
uh i think i have pull on let me see so
if i did for example cat
and then
redirect the standard input from
let's do ls error
you see it prints it out right instead
of doing cat file we just redirected the
inputs like all right your input is the
file not the keyboard itself right so
that's how you do that one there too
okay let's talk about pipelines
so pipeline is sort of essentially us
chaining commands right so we're
grabbing one command and sending its
output to another command so the input
of the other command essentially becomes
the output of the first one and this is
where
you know bash scripting bash commands
becomes somewhat of an art like i
mentioned earlier because the pipeline's
out there it's like it's for every
pipeline out there that you are familiar
with i'm pretty sure someone has found
like a more concise or perhaps a more
efficient way of doing it
um yeah and it's
it's really really interesting to like
just find just look at examples like
there's a bunch of like subreddits on
like command lines and stuff like that
and there's much like stack overflow
threads on this kind of stuff it's
pretty neat so essentially what we're
doing is
you know we're using this pipe operator
for example this one here
and we're building
sort of like chains right
so we can use the ps command which is to
view a snapshot of the processes we'll
do dash f and then we'll use a command
there or like a pipe and then we'll do
grep and then daemon
what's going on here is all right we're
grabbing the output of this ps command
and then we're not showing everything
because grab is going to
grab that input and then just show us
anything that matches damon we're going
to dive into grabbing a little bit uh
later then after after this one okay
uh yeah so pipelines you're just kind of
chaining things and for example there's
this longer one here
if we cat uh oops clear
if we cat ls dash uh error you know
we'll do this other one ls what's the
other one called ls output here we'll do
ls output
and then we'll send it to fmt which will
format it for us and then we'll send it
you see we'll have like sort of this i
think it formats it in paragraphs
and then if we do
uh one more here we'll do it in
pr we'll see we have it set i think this
one actually does it in paragraphs let
me see
or like principle something like that i
can't remember exactly what it does but
it's like a formatting thing and then if
i do lpr i think this is like to make it
uh
to printable something like so you can
actually print it um like paper
actually i guess i don't have it um but
anyway yeah essentially you're like
grabbing output one filtering it
filtering it filtering it and we'll see
this a little bit more with like a more
like
common use case when we use the azure
cli all right
terminating a misbehaving process all
right so we're going to talk a little
bit about
um
sort of how we can use the ps command so
when you're working with
linux administration linux servers
you're probably going to trying to
figure out like oh like is there a cert
like some sort of service some sort of
process that's going wrong and you kind
of want to be able to figure it out so
we're going to sort of mimic like
how to terminate a a misbehaving process
right so what we're going to do is we're
going to create a file like a python
script it's called bad.py right
and we're gonna use vi in this one here
so we'll do vi bad dot py
and here we're gonna have to insert this
i could probably just copy
this herehow do i insert nvi is it just i right
yeah i think so right
and then uh what is it to escape
is it just like
w q i think that's it right yeah i think
that's it
sorry
that's i think that's like one of the
tech twitter jokes is like i don't know
how to like get out of uh uh vm or vi
and things like that right okay cool so
we've created a file okay and it ends in
y s it's a python thing and we've added
this sort of
process that is meant to
cause some some some craziness to in our
terminal right uh so we can start this
by just saying
brush python
3dot p y
p y p y
and then we're going to use the
ampersand
this one here
uh but what's going on here why can't we
do this
oh no should it just be
python3
we don't need bash right there we go
okay cool um
so this ampersand means run the process
in the back so like if i didn't use the
ampersand there it would have
sort of like taken up the terminal and
then i couldn't like type any more
commands but now we're running it in the
background right okay cool
now uh if we do a little ps here we can
see we have this process running and
when i ran this before we didn't have it
right we see this process running in
here too but if we do ps.ef we get more
sort of information like more process
not not just one specific to me or to my
like shell it's like sort of all the
process is running too
now if we did ps-ef and then we're going
to do a piper and then grip python we're
going to get just the information
of the
python thing and then we can see that
well i don't know if y'all can hear my
the fans of my computer just kicked on
uh and then we can see that it's sort of
taking up a lot of cpu time it's kind of
hard to see here because we're like
really zoomed in
um
but uh
yeah so
essentially it's telling us like hey we
this process is like going crazy right
so let's clear this and so how do we end
this right
there's this command called kill um
it's just called that you know it might
be a little aggressive or something like
that but you know who knows if we do
kill dash l
we can see all of the signals that we
can send to a process to
sort of end it or restart it
and
you know i don't know each one of these
signals but i know i think the like the
default is uh
sig um h up or hub i don't know how to
pronounce exactly
um if we wanted to restart it right but
in this case we want the process to just
end without
sort of restarting right so we can just
use uh skill
dash nine
and then the process id uh i didn't copy
the process id let's do ps
ef grip python
and then the process id looks like it
is what is the price
1999.
hold on i might need to do this a little
smaller here
so i can tell what the process id is
grab python
uh i think it's 99.
let's try it kill dash
uh nine and then it's saying it's 99
nope it's not 99. i can't tell which one
it is here uh let's just do ps
e oh no here it is it's a seven nine
zero oh it's this one here my bad i was
looking at the wrong column all right so
kill dash nine which is the signal that
we want to send the kill command and
then we provide the process id which is
7907 there we go
so now we do ps we see we no longer have
python and that's how we end a
misbehaving
right all right our process right
okay
let's talk a little bit about a grep and
filtering output and then i i might be
able to get to the rest of these
exercises that i have here
uh but yes anyway great grep is very
cool grep is very very capable grep
alongside the awk or awk command are
probably two of your best friends when
it comes to using bash um
grab i think stands for like global
regular expression something i i don't
know maybe man will tell us
rep stands for
name
does it not tell us
uh
[Music]
maybe i wrote okay global regular
expression print okay i was close let's
say that too so say for example we
wanted to list the vm sizes we have
available with azure so i can do azure
so az which is the ac cli prefix azvm
list
dash sizes
then i want to you look them up for east
us too which is where i'm based
and then let's output that into a table
so dash o which is the option to output
it in the table
this is probably going to get us a lot
of information right okay cool so i'm
going to clear this and there's a lot in
here i'm like all right maybe i don't
want all of these like i just want to
look for the ones that are dc something
right so i can do
again we can tab we can just use the
arrow up to sort of recall our history
and then we can use grep right i've
actually added this in here here more to
the side and i'm all right so i just
want
ds
and remember here's where we're going to
use wild cards
and then we're expecting some kind of
character and then an underscore and
then a v
two and then it ends with that too oh
hold on it looks like we didn't find
anything
uh that ant that starts with this how
come uh i did this backwards i believe
so
right no that's fine
uh let's look at the output againazvm so we have dc
we've got
dc2s we've got dc
v2 we've got dc hold on we got more up
here i believe soah there's so much here ds
standard
underscore d s i thought we had a ds ds
v2 i might have like put it in wrong
here
uh
let's see everyonewe've got some it should match that i'm
not sure i'm pretty sure i tried this
before ds underscore v all right well
let's figure it out live
uh so we know we want to do
uh and then grip table and then we
wanted to grip only the ones that match
that have some sort of ds
and
let's see what happens when we just do
grab ds okay cool uh let's pair this
with the awk awk and then we'll just
print out the
like specific column awk can be a
session completely on its own
uh here we go print and then we only
want to print the third column here
third column here and then we'll
pipe this into the grip command here
then we'll see oops
we got to close this right here boom
there we go and then we see we're only
going to get this column here too okay
so we have a bunch more here
uh say we want just the ds with
some sort of command some sort of uhdigit digi yes that's what i meant
but only one
and then we do underscore what happens
there no match is found for that one
interesting
uh there like that no match is found for
ds but if we wanted only the v2 ones i
guess we could probably do something
like
anything and then like a dash v2
something like that not much is found
for that either
uh what is the issue here is it because
i need to do like include encapsulate
this like this
let me take a look here
underscore v2 like that
ah i figured it out i forgot to uh
encapsulate them in um single quotes
because i'm i'm assuming it like didn't
recognize this as a rejects in this
thing but it's interesting because i
feel like i've done this in the cloud
shell and it did work but anyway all
right so now you can see
uh output for this uh list images is
only the ones that are ds something yes
you know something but v2 right
and that's sort of how you use grab for
filtering we're gonna have more examples
down here
um but it's i kind of want to get into
batch scripting but i guess i have more
examples here of of grep uh take a look
at those uh and then i did like a bunch
here that you can sort of copy and kind
of work with um just because i want to
like wrap up
i want to respect both people's time we
have an hour left all right so let's
let's just do a little introduction into
uh uh bash scripting and create a bash
file right so uh let's create a file uh
we're gonna use vim for this oh i guess
we can use now because we've used film
before we're gonna create a file called
create files
dot sh
fantastic and then i'm just going to
copy here this here because it's a
little easier
um and then this first thing is called
the shebang right we're essentially just
telling uh the shell hey which script
are we like which where are we what are
we using to execute this and essentially
we're just telling you hey we're using
bash right and then we have a little
comment here that describes what the
script is doing it says say hello and
create some files echo means to echo the
message that's within these single
quotes and then in this case i'm just
saying creating files for you then we've
got a loop if anyone's familiar with
programming
looping is just doing something until
some sort of something ends right so for
f
it's just like a variable
and and remember we can use ranges so
from a through z and then from zero
through five we're going to
echo hello to a file done so essentially
we're going to create a bunch of files
right
and then here what we're going to do now
is exit and then we're going to save
this here and then clear this out
and now what i'm going to do is just cat
that file what was it called again
create file something like that right
just to make sure we saved it correctly
cool
now
we can't execute this so if i try to do
uh what is this called again create
files like that
uh it'll create files for us but we
can't execute it without like if we
wanted to just create underscore files
uh actually it might no if you see it
says command not found create files and
why is this
uh it is because it doesn't exist in our
path so how does bash know like you know
i can write like ls
uh right and i can do like a bunch of
different commands and if you install
like packages and stuff like that they
might have commands like how does bash
know
where to look for these commands right
so there's this thing called a path
and it's spread like this
or case
all letters uppercase
and these are all the directories where
bash knows to go and look for things
that i can execute so you can see up
here we have like user local s bin use
your local bin user bin when you like
have scripts that you like put together
and you want to be able to run them
i think a good one is user dash local
user slash local slash bin to save this
so we can just move this
uh move this file which is create i will
you know let's actually copy create copy
create files
to
slash user slash local slash bin you
could also add
a directory to your
path but for this case we're just going
to move it because it's better to like
move it
and we're in like a directory that's
expecting
your scripts to instead of like just
adding like a random directory to it
right
uh
can i create regular file ah we're
probably gonna have to use pseudo here
we're gonna do sudo and then what we're
gonna do is provide the password
alrighty so we've moved it if i do cat
uh hold on clear
if i do create files now
create
underscore
hold on
let me remove all these files first
remove uh all files that just end in txt
remove all files that end in txt like
that all right i have no files right
i'm just going to remove this dear one
as well
remove
uh dear one
ls fantastic
all right so you see i have no files
here if i do create files create
underscore files now without the sh
it should work too ah it's not working
huh
why is that
uh let's go back to
uh did i not i forgot to might have
forgotten to modify the permissions
all right let's move into the
user slash local
slash bin
files and this is like a step that i
skipped here for
trying to save time right um so often so
have you ever like installed something
on your developer machine and then they
tell you like make sure to change the
permissions and then you just randomly
type in all right chamod 755 or
something like that but what you're
doing is changing the permissions on the
file right and when you do ls-l you can
see the files that are here for example
we've got no permission read write for
the user and then we've got execute read
write for the group and things like that
permissions and links and stuff like
that i'm probably going to do a
different session on that because it's a
little bit more involved but that's
essentially what you're changing too uh
so if i go into let me list the stuff
here uh looks like i have a cube ctl in
here too so if i do chamod
755 and then create files uh i need to
do sudo again because i'm in
my there
755
to create
ls cool now i should be able to do this
uh create
files but just like that
create uh it's not working huh i'm
pretty sure this worked before
interesting let me
do echo path here
and see we got user local user local bin
is in here
uh use your local bin user local s bin
is also in here huh
uh did i i added the bin in there too
what is it then uh create files.sh
oh that worked there for some reason the
extension works there but we're getting
permission denied because we are we
didn't do it with sudo and the reason
we're going to continue permission
tonight is because it's in a bin
directory bin is where binaries and
things are installed so for i guess
safety not i guess for safety and
security purposes they require a
password right
but anyway
that is a very very short introduction
to the shell scripting essentially you
start your files with bin bash
and then you type in your things
and then it'll run commands for you
right