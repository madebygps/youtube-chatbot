all right welcome everybody to another
video today we're going to be looking at
an introduction to a sure durable
functions durable functions is an
extension built on top of azor functions
and it gives you the ability to define
how multiple individual functions can be
orchestrated to work together in a
workflow the accession takes care of a
number of things for us a scalability it
maintains execution position of the
workflow it knows when to execute the
next function it can replay actions it
provides workflow monitoring workflow
state storage amongst a number of other
things now what can we use durable
functions for well we can implement a
variety of patterns like an async HTTP
API if you have a workflow that requires
human interaction you can use durable
functions to create that workflow
chained functions
Fany and fan-out pattern the
possibilities are endless really if you
think about it if you try to implement
these patterns without durable functions
you would have a bad time it would be
complex it would be a very error-prone
because you would have to manually
manage each one of these checkpoints so
luckily the extra functions team has our
back and has provided durable functions
for us to work with so that's enough
theory let's just create a project
envious code so let's switch over to the
screen let's create a folder you just
call it durable func demo and then we're
going to open that folder up and vs code
let's go ahead and create a new functioninside out of our current directory is
fine I'm going to be using c-sharp and
your template you want to make sure you
select durable functions orchestration
and the default name is fine name space
default
it's fine select storage account I'm
gonna create a new storage account
durable funk demo GPS oh it is already
si how about that si there we go and I'm
gonna create a new resource group
terrible funk demo GPS resource group
awesome East us - alright what we're
gonna do before we dive into actually
explaining the template that gets
created I'm going to create two classes
we're gonna need this for the example
that we're going to be creating so let's
go ahead and create a new class here
we're gonna call it employee and we're
just going to describe it public class
employee and our employee has a ID and
our employee also has a name we could
add more but just to keep it simple and
we're also going to create a class
public static oh no name name oh you
know what let's add email to public
string email awesome okay and let's save
that and we're gonna create another file
here that's called employees request and
in here we're going to put a class
employee ease request and in here we're
just gonna create a list public list of
type employee and it's gonna be called
employees and get the getters in the
setters awesome and we need to import
perfect so let's save that public string
awesome so we can just close these two
we're going to need them later but let's
not pay attention to them right now so
you can see there's actually quite a bit
of code that gets created when you
create this specific template in Azure
functions so let's scroll down to the
bottom and look at them individually the
first one you can see is a durable
client this is the type of durable
function that works as the entry point
so if you're familiar with other
functions you know that they get
triggered by something that could be a
blob a cue message in HTTP trigger etc
so this is the function that gets
triggered there are actually 4 logical
types of functions in durable functions
there's client activity orchestration
and entity we're not going to be using
entity in this video I'll save that for
a later video all right so again let's
take a look at the code in here so we
see that this first line is calling
something that's called a start new
async and it has two parameters so
what's actually going on here is it's
kicking off whatever orchestration is
defined in here with this data that it
can pass on we receive an instance ID
which gets returned from this method and
then what gets returned to whoever
called whoever's triggered this method
is an HTTP response message that
responds message contains a lot of
useful information for the end client so
they can get some status on the
orchestration and monitoring information
on New York and the orchestration but
we'll take a look at that once we get
there we're actually going to edit this
method a little bit so we're gonna be
sending some JSON when we trigger the
function so in the client function here
we're going to actually have to receive
that serve me do to our data equals
let's see if I remember this so I think
it's a wait yeah we do we request
tense read as a sink okay it's a type
employee request yes there we go perfect
so we're just going to be getting the
JSON that we send and then we move on so
what gets called here our orchestration
functions so let's move up to the top
this logical type is the one that is in
charge of defining the workflow defining
which activity functions gets called so
if we see here we can see three calls
that look pretty much the same they're
calling the same activity function
except the data that gets passed in is
different each time right all right so
here since we passed in the data from
the client we need to receive it somehow
so we're gonna create employee's request
which is going to equal just the data
and we can receive the input via this
context keyword here so we can do
context dot get input and this is going
to be of type employee request and
perfect there we go so now the data that
was passed on from oh I forgot to send
it here so the data was passed on here
to this orchestration is being received
in this line here also we have a list
here but I'll explain that as we go bear
with me I will get to it alright so
since this is a list as well we need to
loop through it so what we're going to
do is for each var employee in data dot
employees and then just loop through it
okay so what I'm actually going to do is
delete two of these and I'm going to
delete this comment here and I'm
actually just going to move this line
into this loop are already so what is
going on here it looks like to this list
that we that's declared up here we're
adding whatever gets returned from this
activity function but we don't want to
send this hard-coded data we just want
to
send in the data that we got from the
input here so what we're gonna do is
just send in employee dot that's just
your name to keep it super simple rightso this is going to get executed however
many records of JSON we have so if we
send to employees it's going to get
executed twice obviously because it's
going it's looping through the list so
we're also going to remove this year
because this comment no longer makes
sense so from here the orchestrator says
okay it looks like I have to execute
this activity function let's go look at
that activity function and see what it
does
alright so we see we have our say hello
activity function here and it's
receiving a string which is being passed
on here because again the orchestrator
is calling this activity function the
activity function of this name provided
this information so to the console
saying hello to whatever variable gets
passed in here it's going to print out
and then we're simply returning whatever
it gets passed into this variable here
so if I were to send JSON that says
employee name
Gweneth employee name sugar this is
gonna go through here and it's basically
gonna say hello saying hello to Gweneth
then returns hello Gweneth and adds that
to our list here so let's execute all of
this and see what I'm talking about
let's go to run that here we go alright
so we need this URL and we're going to
trusty postman and we're gonna create a
new request here it's type post and we
need to make sure that it is JSON and we
need to send it some so I asked some
short data because I want to show you
the monitoring that we can do let's go
back here and raw all right so let's
take a look so let's send this request
and see what happens so you see we get
returned a bunch of you our eyes I'm not
going to go into them all specifically
the one that matters for this example is
this one this is steadies status query
get you are
so if we actually send a request to that
just to see what it's all about we
actually get some useful information
here we get an instance ID a runtime
status it tells us if it's running or
its completed or if there's been some
sort of error at the moment its
completed and we get the input that we
sent and we also get the output so
remember I said in here we have this
list and then each time there's a record
that it loops into it just gets saved to
the list with hello that's the same that
we're getting here now let's try sending
more JSON than just two records or three
records alright let's go back into here
and let's hit send again let's go to the
URI provides to check status and hit
Send so what's different this time is
since it's longer we have the runtime
status isn't set to complete it set to
running because it's still running if we
look at the output you can say you can
see it says null because there's no
output yet let's go into the function
and you can see it's going through all
those it's printing out the name or
logging to console the name and this
should be done in a few seconds again if
we were to hit Send it's oh it's just
completed right now it would have said
running if I hit it maybe two seconds
before but it's completed now we can see
we have all the JSON and if we take a
look at outputs you can see we have all
the outputs here all right so that was
my very brief introduction to azure
durable functions the important part I
think to fully start grasping what
functions are is it's just an
orchestration of a workflow it allows
you to piece a bunch of different
functions together and it really takes a
lot of the management and administration
work that you have to do as far as
worrying about state and storage and
where you are in the workflow and you
can just work on the logic and it also
provides a lot of useful information
like the status that we saw there the
output
and the ID and all that stuff so I'm
going to be working on actually putting
together few more complex or complete
examples and so I can explain it a
little better but I did want to just
throw out an introduction video because
this topic has been a lot of fun for me
to actually dive into anyway thank you
for watching this video
I appreciate all the feedback and
support that I've been getting and I'm
definitely gonna be creating more if you
have any topics you'd like to see me
cover as far as really anything as
you're related I dip my toes into a lot
of different areas Vasher I'd like to
hear them so leave them in the comments
or you can hit me up on Twitter I'm made
by GPS Instagram made by GPS and yeah I
hope everyone's staying safe and healthy
and yeah I will see you in the next
video