and the last couple of years that I've
been in the space I've definitely picked
up on this sort of pattern that has made
learning different cloud services
significantly easier and in my opinion a
little bit more efficient I like to go
call it Association
really all it means is you have some
sort of service or some sort of project
that you're familiar with and through
that same project you go and you enable
yourself to learn new things and the
idea is that when you go and learn
something new you're not learning
everything about it a hundred percent
because you have some sort of something
that's familiar to you something that
you can associate the project that you
worked on previously or the service that
you worked on previously to whatever it
is that you're picking up that is new
now
as an example
last weekend I built three different
projects a console application
in API and a CLI tool okay now
even the actual API was two different
versions one was using in typical
serverless
API and the other version was using
something called durable functions which
is an extension on top of azure
functions which is what I used for the
typical serverless API implementation
now they were all essentially different
deployment models different compute
models which when you think of what the
cloud is
to the highest level of obstruction
you're just looking at a bunch of
different ways to deploy your
application right your cloud is where
your application ends up living in so
your clients customers other people can
consume it there's a lot of skills there
yes there's a lot under the hood a lot
of networking Linux all that kind of
stuff but ultimately that's what the
cloud is made for right
so you're really your best sort of bang
for your buck in terms of learning is
really understanding the different
deployment models that you can use
that's why when you go and you want to
learn a different
oh you want to implement a different
project or you want to learn something
new in the cloud I highly recommend it
is around like some sort of compute
model
and that way you don't have to go and
come up with completely new projects
every single time so again coming back
to this example of what I did over the
weekend
my the whole premise of the project
essentially was a a timestamp generator
so if you're not familiar with how
YouTube works in the description like in
this video there's timestamp so you can
click around and it'll say hey a minute
like two minutes 30 seconds I talk about
this and then this description of what
happens then right
I you may or may not be familiar with
the long live streams that I do where
I'm essentially just answering people's
questions
and those tend to be anywhere from one
hour to two hours to sometimes three
hours so manually going and getting time
sense for those is a pain
so as soon as open AI API became a thing
I was like this is absolutely what I
need to automate this task for me
so over the weekend I sat down I was
like okay I want to create this and you
may or may not have seen sort of
screenshots and the GitHub repos of
these projects that I ended up open
sourcing but I had the premise the
project itself that was essentially what
I wanted to make so the idea I didn't
have to go and find a new idea for the
console app for the different types of
apis for the different for the CLI tool
it was like it's the same project
and believe it or not not having to come
up with a new idea for every time you
want to learn something in cloud is
significantly going to improve the
experience and going to improve your
time because you know no coming up with
the idea is the hardest part right
so I had I had the the idea of what I
wanted to build and I had an idea of
what services I needed to use but I
wanted to sort of work in an environment
where I didn't have to worry about
anything except for just getting the
logic out because I knew I was going to
have to deal with okay so how am I going
to parse this data how am I going to
make this most efficient in terms of
calls to the API how do I consume a
decent amount of tokens where I get like
a balance where it's like I'm getting
the results that I want but also trying
to be efficient with a token use
and the easiest way when it comes to
programming to just kind of like have
like a scratch pad for your ideas is
using a console app right this isn't
something that I was worried about
deploying but even because it's this
simple sort of deployment model or I
guess programming environment
it was easy for me to pick up new things
as well like for example I hadn't
created a console application in.net
since maybe.net
I can't maybe done at three
and to the experience that it is now and
done at seven significantly different
like if you do.net new and you create a
console application it's you kind of can
straight up it's very similar to what a
python experience has been where you
open up a new
um file and then you kind of can
straight up write print uh some sort of
message and then you can run that a.net
is at a similar place as well now which
I was pleasantly surprised to see that
and things like working with apis in the
context of a console application working
writing to files and okay as soon as I
was able to kind of get the rough ideas
like this is the logic that I need to
use I was like okay I've got the logic
I've got what I want this thing to do I
know what I need to work with how do I
go and further take my these skills to
like kind of learn something new
so then my next I guess Association
pattern there is like okay I'm familiar
with Azure functions let's make that the
next step to get it to be an API that I
can deploy into azure because I knew
that once I get into Cloud sort of
incorporating or it into a different
compute model maybe using App service
container apps durable functions Azure
static web apps anything like that is
going to be possible because it's
already in Azure and maybe using other
services like storage key Vault all
those kinds of things is also going to
be easier because it's already a natural
so that's like the next step in terms of
Association I end up creating an API
that has two functions but the thing
here is okay I knew that this wasn't
going to be the end result for the API
because I was already doing something
that wasn't as efficient I created two
functions and I had one function called
the other one via its URL and if you
have worked with serverless applications
you know that there's probably better
ways in terms of efficiency once you hit
like scale than just calling one
function to another and this is why
things like durable functions exist
throwable functions is an extension on
top of azure functions but I have not
had too much experience with it so now
that I had the API and everything
working the way I wanted to work in in
like with like sort of regular Azure
functions I was like this is my
opportunity to take this to the next
step and learn durable functions so I
did I implemented durable functions and
I had a function chaining pattern so
with variable functions you can do
function chaining fan in fan now
monitoring manual intervention a bunch
of different patterns that um it's kind
of difficult to implement with just
normal functions
so I got that going I'm like this is
awesome
but it was essentially just an API at
that point I was like okay I wanna I
want like this to be a little bit more
user friendly so I created a front-end
this was my opportunity to continue that
Association pattern where it's like okay
I know the data I know what the API is
returning to me how do I grab that data
and parse it in a familiar way uh so
then I created a Blazer web assembly
application I Incorporated Azure signalr
service into the API so I can get the
data returned to me in real time and
that way there's a gif that or a
screenshot that I'll insert somewhere
here they'll show you the functionality
that I'm trying to gather but as soon as
a timestamp was generated I wanted it to
show to the screen to the web app
instead of me waiting for everything to
be returned from the API and that's
where signal our service comes into play
and here I learned a bunch more things
how to use signalr service with.net7 how
to use it with durable functions how to
use it with blazer webassembly right but
each time that I'm sort of working
towards or through this I guess
I don't know
timeline or pattern or whatever or
Journey it's not every step is
completely new it's like I have a little
bit of context that's like okay I have
this how do I get to here
and how do I get to this new thing that
I want to learn right
after that I was like okay I don't
necessarily want to have this API public
I'm going to open source the code people
can deploy it for themselves because I
don't want people consuming my API
because I I pay for that in open AI the
open AI API credits I have to pay for
them after the grant is done
so if I open source this so if I if I
make it publicly available people are
going to call the API and then I'm going
to end up paying who knows how much
so I was like okay but this is a tool
that I want to use probably every single
day
so this was my opportunity to learn
another new thing which is how to create
acli tool with.net oh it starts very
similar to the first project actually
which is creating a console application
but there are a few things that you have
to keep in mind when you're creating a
CLI tool in any language really like how
do you work with arguments how do you
you know do validation how do you pack
the tool how do you install it all these
kinds of things and I learned all of
that because of this tool so I knew the
logic already I knew the outputs that I
wanted to get so how do I what's that
middle step there like how do I actually
create the project accordingly how do I
get it to run by just typing like
timestamper URL this amount of
timestamps I want generated and
ultimately I ended up doing that too
the API and the CLI tool are now open
source I'll have the repost to that but
overall I ended up learning like I don't
know I named like 10 11 different types
of technologies that I got Hands-On with
over the weekend over the course of
three different projects but it didn't
feel like I had to create three
different projects like three entire
different projects because I ultimately
didn't I grabbed a little bit from each
one and it kind of kept moving forward
but that's the way that you can utilize
and be more efficient with your skill
set with your time with your resources
to further your knowledge so what you
can do now is kind of stick it take a
moment to sit down and write down a
project that you've worked on that
you've implemented or maybe a
programming language that you're
familiar with a cloud service that
you're familiar with really anything as
your starting point and then from there
think about like okay how can I so let's
say you've created some sort of python
API well how can you deploy that to app
service how can you deploy that to
container apps how can you deploy that
to Azure functions how can you deploy
that to gcp Cloud run how can you deploy
that to AWS
Lambda and like think about like where
it's at and where can like what do you
have to tweak to get it to work in
something else right because the more
you understand of how you can actually
get things to work in the cloud
not just specific to azure the better
off you're going to be like when someone
comes and asks you like hey what's the
best approach to take this you're going
to be like oh the downsides are the pro
and cons to working with this is this
the pro and cons so working with this
type of service is that right so it's
more about not necessarily coming up
with a unique idea for every single
project that you're trying to build but
it's more so leveraging projects that
you've already built swap out one thing
for another you've got another project
and you've got more experience and you
don't have to like reinvent the wheel
either
all right so do let me know what kind of
like where you're is is your sort of
your starting point and what changes
you're going to make I would love to
know and if you don't sort of have an
idea of what you want to like change
write your idea down in the comments and
then we can probably brainstorm and see
what uh what modifications we can make
there
but yeah thanks for watching and I'll
see you in the next video