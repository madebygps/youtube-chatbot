{
  "id": "9G5cVE2eNTg",
  "title": "How I Learn New Cloud Technologies Quickly",
  "transcript": "and the last couple of years that I've\nbeen in the space I've definitely picked\nup on this sort of pattern that has made\nlearning different cloud services\nsignificantly easier and in my opinion a\nlittle bit more efficient I like to go\ncall it Association\nreally all it means is you have some\nsort of service or some sort of project\nthat you're familiar with and through\nthat same project you go and you enable\nyourself to learn new things and the\nidea is that when you go and learn\nsomething new you're not learning\neverything about it a hundred percent\nbecause you have some sort of something\nthat's familiar to you something that\nyou can associate the project that you\nworked on previously or the service that\nyou worked on previously to whatever it\nis that you're picking up that is new\nnow\nas an example\nlast weekend I built three different\nprojects a console application\nin API and a CLI tool okay now\neven the actual API was two different\nversions one was using in typical\nserverless\nAPI and the other version was using\nsomething called durable functions which\nis an extension on top of azure\nfunctions which is what I used for the\ntypical serverless API implementation\nnow they were all essentially different\ndeployment models different compute\nmodels which when you think of what the\ncloud is\nto the highest level of obstruction\nyou're just looking at a bunch of\ndifferent ways to deploy your\napplication right your cloud is where\nyour application ends up living in so\nyour clients customers other people can\nconsume it there's a lot of skills there\nyes there's a lot under the hood a lot\nof networking Linux all that kind of\nstuff but ultimately that's what the\ncloud is made for right\nso you're really your best sort of bang\nfor your buck in terms of learning is\nreally understanding the different\ndeployment models that you can use\nthat's why when you go and you want to\nlearn a different\noh you want to implement a different\nproject or you want to learn something\nnew in the cloud I highly recommend it\nis around like some sort of compute\nmodel\nand that way you don't have to go and\ncome up with completely new projects\nevery single time so again coming back\nto this example of what I did over the\nweekend\nmy the whole premise of the project\nessentially was a a timestamp generator\nso if you're not familiar with how\nYouTube works in the description like in\nthis video there's timestamp so you can\nclick around and it'll say hey a minute\nlike two minutes 30 seconds I talk about\nthis and then this description of what\nhappens then right\nI you may or may not be familiar with\nthe long live streams that I do where\nI'm essentially just answering people's\nquestions\nand those tend to be anywhere from one\nhour to two hours to sometimes three\nhours so manually going and getting time\nsense for those is a pain\nso as soon as open AI API became a thing\nI was like this is absolutely what I\nneed to automate this task for me\nso over the weekend I sat down I was\nlike okay I want to create this and you\nmay or may not have seen sort of\nscreenshots and the GitHub repos of\nthese projects that I ended up open\nsourcing but I had the premise the\nproject itself that was essentially what\nI wanted to make so the idea I didn't\nhave to go and find a new idea for the\nconsole app for the different types of\napis for the different for the CLI tool\nit was like it's the same project\nand believe it or not not having to come\nup with a new idea for every time you\nwant to learn something in cloud is\nsignificantly going to improve the\nexperience and going to improve your\ntime because you know no coming up with\nthe idea is the hardest part right\nso I had I had the the idea of what I\nwanted to build and I had an idea of\nwhat services I needed to use but I\nwanted to sort of work in an environment\nwhere I didn't have to worry about\nanything except for just getting the\nlogic out because I knew I was going to\nhave to deal with okay so how am I going\nto parse this data how am I going to\nmake this most efficient in terms of\ncalls to the API how do I consume a\ndecent amount of tokens where I get like\na balance where it's like I'm getting\nthe results that I want but also trying\nto be efficient with a token use\nand the easiest way when it comes to\nprogramming to just kind of like have\nlike a scratch pad for your ideas is\nusing a console app right this isn't\nsomething that I was worried about\ndeploying but even because it's this\nsimple sort of deployment model or I\nguess programming environment\nit was easy for me to pick up new things\nas well like for example I hadn't\ncreated a console application in.net\nsince maybe.net\nI can't maybe done at three\nand to the experience that it is now and\ndone at seven significantly different\nlike if you do.net new and you create a\nconsole application it's you kind of can\nstraight up it's very similar to what a\npython experience has been where you\nopen up a new\num file and then you kind of can\nstraight up write print uh some sort of\nmessage and then you can run that a.net\nis at a similar place as well now which\nI was pleasantly surprised to see that\nand things like working with apis in the\ncontext of a console application working\nwriting to files and okay as soon as I\nwas able to kind of get the rough ideas\nlike this is the logic that I need to\nuse I was like okay I've got the logic\nI've got what I want this thing to do I\nknow what I need to work with how do I\ngo and further take my these skills to\nlike kind of learn something new\nso then my next I guess Association\npattern there is like okay I'm familiar\nwith Azure functions let's make that the\nnext step to get it to be an API that I\ncan deploy into azure because I knew\nthat once I get into Cloud sort of\nincorporating or it into a different\ncompute model maybe using App service\ncontainer apps durable functions Azure\nstatic web apps anything like that is\ngoing to be possible because it's\nalready in Azure and maybe using other\nservices like storage key Vault all\nthose kinds of things is also going to\nbe easier because it's already a natural\nso that's like the next step in terms of\nAssociation I end up creating an API\nthat has two functions but the thing\nhere is okay I knew that this wasn't\ngoing to be the end result for the API\nbecause I was already doing something\nthat wasn't as efficient I created two\nfunctions and I had one function called\nthe other one via its URL and if you\nhave worked with serverless applications\nyou know that there's probably better\nways in terms of efficiency once you hit\nlike scale than just calling one\nfunction to another and this is why\nthings like durable functions exist\nthrowable functions is an extension on\ntop of azure functions but I have not\nhad too much experience with it so now\nthat I had the API and everything\nworking the way I wanted to work in in\nlike with like sort of regular Azure\nfunctions I was like this is my\nopportunity to take this to the next\nstep and learn durable functions so I\ndid I implemented durable functions and\nI had a function chaining pattern so\nwith variable functions you can do\nfunction chaining fan in fan now\nmonitoring manual intervention a bunch\nof different patterns that um it's kind\nof difficult to implement with just\nnormal functions\nso I got that going I'm like this is\nawesome\nbut it was essentially just an API at\nthat point I was like okay I wanna I\nwant like this to be a little bit more\nuser friendly so I created a front-end\nthis was my opportunity to continue that\nAssociation pattern where it's like okay\nI know the data I know what the API is\nreturning to me how do I grab that data\nand parse it in a familiar way uh so\nthen I created a Blazer web assembly\napplication I Incorporated Azure signalr\nservice into the API so I can get the\ndata returned to me in real time and\nthat way there's a gif that or a\nscreenshot that I'll insert somewhere\nhere they'll show you the functionality\nthat I'm trying to gather but as soon as\na timestamp was generated I wanted it to\nshow to the screen to the web app\ninstead of me waiting for everything to\nbe returned from the API and that's\nwhere signal our service comes into play\nand here I learned a bunch more things\nhow to use signalr service with.net7 how\nto use it with durable functions how to\nuse it with blazer webassembly right but\neach time that I'm sort of working\ntowards or through this I guess\nI don't know\ntimeline or pattern or whatever or\nJourney it's not every step is\ncompletely new it's like I have a little\nbit of context that's like okay I have\nthis how do I get to here\nand how do I get to this new thing that\nI want to learn right\nafter that I was like okay I don't\nnecessarily want to have this API public\nI'm going to open source the code people\ncan deploy it for themselves because I\ndon't want people consuming my API\nbecause I I pay for that in open AI the\nopen AI API credits I have to pay for\nthem after the grant is done\nso if I open source this so if I if I\nmake it publicly available people are\ngoing to call the API and then I'm going\nto end up paying who knows how much\nso I was like okay but this is a tool\nthat I want to use probably every single\nday\nso this was my opportunity to learn\nanother new thing which is how to create\nacli tool with.net oh it starts very\nsimilar to the first project actually\nwhich is creating a console application\nbut there are a few things that you have\nto keep in mind when you're creating a\nCLI tool in any language really like how\ndo you work with arguments how do you\nyou know do validation how do you pack\nthe tool how do you install it all these\nkinds of things and I learned all of\nthat because of this tool so I knew the\nlogic already I knew the outputs that I\nwanted to get so how do I what's that\nmiddle step there like how do I actually\ncreate the project accordingly how do I\nget it to run by just typing like\ntimestamper URL this amount of\ntimestamps I want generated and\nultimately I ended up doing that too\nthe API and the CLI tool are now open\nsource I'll have the repost to that but\noverall I ended up learning like I don't\nknow I named like 10 11 different types\nof technologies that I got Hands-On with\nover the weekend over the course of\nthree different projects but it didn't\nfeel like I had to create three\ndifferent projects like three entire\ndifferent projects because I ultimately\ndidn't I grabbed a little bit from each\none and it kind of kept moving forward\nbut that's the way that you can utilize\nand be more efficient with your skill\nset with your time with your resources\nto further your knowledge so what you\ncan do now is kind of stick it take a\nmoment to sit down and write down a\nproject that you've worked on that\nyou've implemented or maybe a\nprogramming language that you're\nfamiliar with a cloud service that\nyou're familiar with really anything as\nyour starting point and then from there\nthink about like okay how can I so let's\nsay you've created some sort of python\nAPI well how can you deploy that to app\nservice how can you deploy that to\ncontainer apps how can you deploy that\nto Azure functions how can you deploy\nthat to gcp Cloud run how can you deploy\nthat to AWS\nLambda and like think about like where\nit's at and where can like what do you\nhave to tweak to get it to work in\nsomething else right because the more\nyou understand of how you can actually\nget things to work in the cloud\nnot just specific to azure the better\noff you're going to be like when someone\ncomes and asks you like hey what's the\nbest approach to take this you're going\nto be like oh the downsides are the pro\nand cons to working with this is this\nthe pro and cons so working with this\ntype of service is that right so it's\nmore about not necessarily coming up\nwith a unique idea for every single\nproject that you're trying to build but\nit's more so leveraging projects that\nyou've already built swap out one thing\nfor another you've got another project\nand you've got more experience and you\ndon't have to like reinvent the wheel\neither\nall right so do let me know what kind of\nlike where you're is is your sort of\nyour starting point and what changes\nyou're going to make I would love to\nknow and if you don't sort of have an\nidea of what you want to like change\nwrite your idea down in the comments and\nthen we can probably brainstorm and see\nwhat uh what modifications we can make\nthere\nbut yeah thanks for watching and I'll\nsee you in the next video",
  "key_phrases": [
    "typical serverless API implementation",
    "long live streams",
    "two minutes 30 seconds",
    "seven significantly different",
    "open AI API",
    "different deployment models",
    "different cloud services",
    "three different",
    "different versions",
    "different compute",
    "different ways",
    "different types",
    "last couple",
    "hundred percent",
    "CLI tool",
    "actual API",
    "other version",
    "highest level",
    "compute model",
    "two hours",
    "GitHub repos",
    "console app",
    "hardest part",
    "decent amount",
    "token use",
    "easiest way",
    "scratch pad",
    "um file",
    "new things",
    "other people",
    "timestamp generator",
    "new projects",
    "python experience",
    "same project",
    "best sort",
    "simple sort",
    "new idea",
    "programming environment",
    "application",
    "years",
    "space",
    "pattern",
    "opinion",
    "something",
    "everything",
    "example",
    "extension",
    "top",
    "functions",
    "bunch",
    "clients",
    "customers",
    "lot",
    "skills",
    "networking",
    "Linux",
    "kind",
    "stuff",
    "right",
    "terms",
    "learning",
    "weekend",
    "premise",
    "YouTube",
    "description",
    "video",
    "questions",
    "sense",
    "pain",
    "task",
    "screenshots",
    "sourcing",
    "apis",
    "logic",
    "okay",
    "data",
    "calls",
    "tokens",
    "balance",
    "results",
    "ideas",
    "print",
    "message",
    "App service container apps durable functions",
    "Blazer web assembly application",
    "open AI API credits",
    "static web apps",
    "storage key Vault",
    "monitoring manual intervention",
    "console application working",
    "different compute model",
    "Azure signalr service",
    "regular Azure functions",
    "function chaining pattern",
    "blazer webassembly",
    "different patterns",
    "two functions",
    "throwable functions",
    "variable functions",
    "normal functions",
    "similar place",
    "rough ideas",
    "other services",
    "end result",
    "other one",
    "serverless applications",
    "familiar way",
    "real time",
    "one function",
    "middle step",
    "new thing",
    "acli tool",
    "first project",
    "next step",
    "API public",
    "Association pattern",
    "things",
    "apis",
    "context",
    "files",
    "logic",
    "use",
    "skills",
    "kind",
    "something",
    "Cloud",
    "natural",
    "terms",
    "URL",
    "ways",
    "efficiency",
    "scale",
    "extension",
    "top",
    "experience",
    "everything",
    "sort",
    "opportunity",
    "fan",
    "bunch",
    "front-end",
    "data",
    "gif",
    "screenshot",
    "functionality",
    "timestamp",
    "show",
    "play",
    "timeline",
    "Journey",
    "little",
    "bit",
    "code",
    "people",
    "grant",
    "source",
    "day",
    "mind",
    "language",
    "arguments",
    "validation",
    "outputs",
    "amount",
    "repos",
    "three different projects",
    "three entire",
    "11 different types",
    "programming language",
    "starting point",
    "python API",
    "container apps",
    "Azure functions",
    "best approach",
    "one thing",
    "next video",
    "app service",
    "gcp Cloud",
    "cloud service",
    "unique idea",
    "technologies",
    "Hands",
    "weekend",
    "course",
    "little",
    "way",
    "skill",
    "time",
    "resources",
    "knowledge",
    "moment",
    "sort",
    "AWS",
    "Lambda",
    "something",
    "things",
    "someone",
    "downsides",
    "cons",
    "single",
    "experience",
    "wheel",
    "kind",
    "comments",
    "modifications",
    "10"
  ]
}