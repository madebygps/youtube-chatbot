{
  "id": "kvjnUzyrXCU",
  "title": "Cloud DevOps Project - Build an API complete with IaC and CI/CD",
  "transcript": "hi everyone welcome to a new style of\nvideos that I'm calling micro Cloud\nprojects my goal is to give you\nsomething that you can get done and in\nproduction in about two hours time so\nmaybe you have an afternoon maybe you\nhave a weekend this would be perfect to\nget hands on in that amount of time\ntoday we're going to be looking at how\nyou can deploy your resume API using\nAzure serverless services this solution\nwill run for pennies every single month\nso no worries on going over your\nlearning budget there but I highly do\nrecommend you set budgets just in case\nand you can use this to build other\nprojects later on maybe it's a micro\nservice for an additional project you\nwant to work on later maybe it's the\nback end for your portfolio maybe it's\njust I don't know sample day that you\nneed for something who knows the\npossibilities are\ninfinite here alrighty and again the\ngoal with this course and this project\nis to get you hands on and piecing\ntogether the solution in production and\nnot getting too stuck into the\nnitty-gritty details of any specific or\nindividual technology with all that\nbeing said hi I'm GPS and welcome to\na micro Cloud project this is what we're\ngoing to end up with we are going to\nhave an API you can see here this is an\nin production hosted using Azure\nfunctions\nAPI for us and it's going to return us\nJson with our resume information and API\nformat which I think is pretty cool we\ncan actually do something like this curl\ncommand here\ncurl Dash X get and then we just provide\nthe URL of our API and you can see that\nthis returns that Json information for\nus besides getting Hands-On with Azure\nfunctions we're also going to be using\nsome devops practices in this case we\nobviously have Version Control with\nGitHub and git then we have some\ninfrastructure as code with bicep those\nfiles are here as well and then we have\nsome continuous integration and\ncontinuous deployment cicd with this\nGitHub workflow so plenty to get hands\non with let's get right into it so\nyou're gonna need a GitHub account and\nan Azure account and depending if you\nwant to work locally or in the cloud you\ncan use GitHub code spaces to use the\ncloud development environment I can I've\nconfigured a Dev\ncontainer.json file for us which will\nhave all the instructions for code\nspaces to go and install\neverything we need but you can also\nclick on code well actually after you\nFork the repository click on code and do\nlocal and then clone it locally I would\nrecommend sticking to one of those too\nif you work locally make sure you have\nvs code and Docker and the def container\nextension you can also choose to work\nlocally without Docker BS code or the vs\ncode extension and then install\neverything on your own that's going to\ntake you a little bit more time and\nhonestly you don't get a lot of value\nfrom spending that much time setting\nthings up it's more so you know putting\nthe pieces together of this project so\nI'd recommend sticking to one of the two\nbut yeah\nGitHub for Version Control GitHub\nactions for CI CD Azure functions to\ndeploy our API Azure blob storage to\nstore our resume that Json file we're\ngoing to be\nusing.net.net6 and c-sharp as the\nlanguage for our Azure function and that\nfunction is going to be using an HTTP\ntrigger and a blob storage binding\nGitHub code spaces if you choose so to\nbe a development environment and then\nbicep for our infrastructure s code and\nof course you'll need Azure account a\nGitHub account and this file my\nresume.json I recommend you go ahead and\nedit it\nand update all the information that you\nlike to for example here it says name\nlabel image email all these types of\nthings I've just left it as the default\nso go and update that so it returns your\ndata but I'll be using this dummy data\nthat's provided for us okay\nso you will have the option to let me\nopen the private browser here you will\nhave the option to click uh Fork this\nwill create a copy of this repository in\nyour own account once you click fork and\nyou've got it for yourself you're going\nto click on code and then either choose\nlocal and then close the cone locally\nor hit code spaces and when you hit code\nspaces it's going to say create code\nspace on Main I've already created one\nyou go and click that you're going to\nget a loading screen after that and then\nafter that you're going to see a screen\nthat looks like visual Visual Studio\ncode\nexcept it is going to have\na a URL up here because this is all in\nthe cloud I'm just going to use code\nspaces but again you have the local\noptions if you'd like to use it as well\non the left side if you click on these\nfour cubes it says extensions you'll see\nthat the code space itself has a few\ninstalled\nI know that we can go to explore and\nthen I expand Dev container and then\ndevcontainer.json and let me zoom in\nhere a little bit\nand we can see that\nthese are the extensions that I have\ntold code spaces to install for this\nproject specifically\nvs code Azure functions c-sharp and vs\ncode bicep however\nsince we are using an image a Docker\nfile that already has a bunch of prereqs\nfor working with Azure functions C\nsharp.net6 isolated there are also other\nconfigurations that come along with that\nso these extensions are on top of those\nconfigurations for us\nthe docker file is also in here and you\ncan see if you're familiar with Docker\nand Docker files this is the file that\ngives Docker everything that it needs to\ngo and build the image for you to be\nable to work inside of\nand\nthat image is right here okay so\nas a summary this folder here.dev\ncontainer tells code spaces everything\nit needs to create our Cloud development\nenvironment\nthis isn't a course on dev containers\nand code spaces so we won't dive too\nmuch more into that\nall right let's go over the project\nstructure a little more so we covered\nwhat is inside that of that dot Dev\ncontainer directory let's now take a\nlook at the dot GitHub directory and you\ncan see inside of here we have a\nworkflows directory and inside here we\nhave build.yaml which I have open here\nas well I'm going to close this so we\nhave a little bit more space and zoom in\nhere a bit more\nthis build.yaml is what is going to tell\nGitHub actions to create RCI CD pipeline\ncicd stands for continuous integration\nand continuous deployment\nand this is what is going to allow us to\nwhen we do a certain action to run the\npipeline for us\nso in this case on workflow dispatch so\nthis means we'll have a manual way to\nrun this workflow and I'll show you that\nin a little bit\nand whenever we make pushes to the main\nbranch this workflow will also kick off\nat the moment what this is going to do\nis grab our app\nor a API that is meant to host our Json\ninformation\nand deploy it to our Azure function\nthat we have in our Azure count\nso we can see the jobs is to build and\ndeploy using Ubuntu Dev environment\nsteps check out getup actions then it's\ngoing to set up our.net environment\nwe're using 6.net6\nand then we're going to run this bash\ncommand here which is going to create a\nrelease for our Azure function\nfrom our Azure function project and grab\nthat and deploy that to functions and\nthen it's going to run Azure functions\naction\nand it uses this here\nand then it knows where to publish it\nbecause we're going to provide it a\npublished profile\nagain this isn't a course on GitHub\nactions specifically so for the context\nof this project just keep in mind that\nthe build that yaml is the file that is\ngoing to create our GitHub actions CI CD\npipeline okay\nthen we have a vs code inside of vs code\nwe have an extensions.json which tells\nRBS code environment hey these are some\ninformation\nabout the extensions and in this case\nrecommendations and it tells the\nrecommend recommended extensions that we\nshould have this is also in our Dev\ncontainer so it's a little redundant\nhere but it's here\nthen we have launch.json\nas you know in programming debugging is\na big part of programming\nand on this left side we have this run\nand debug\nand you can see that if we have this\ndrop down we have an attached to.net\nfunctions which matches this name right\nhere\nso the launch.json is all about\nconfiguring the different tasks that you\ncan do with debugging\nin this case we have a task called\nattach to done functions type core CLR\nrequest\ntype attach and then it's going to\nattach to this process ID\nwhich it gets by running this command\nand then it runs it attaches to our\nAzure function so we can debug it\nso remember launch.json is all about\nconfiguring your debugging behaviors\nnext we have settings\nand these are just overall project\nsettings for vs code for example\nthe deploy subpath the project language\nproject runtime and you can Define more\nthings in here if needed but we don't\nneed anything else specific for this\nproject the tasks.json is where we can\nconfigure different types of tasks that\nwe need to run with our solution so if I\ndo control shift p or command shift p if\nyou're on a Mac and then you select\ntasks run task you will see that we have\nbuild clean functions clean release\nfunctions Funko start publish functions\nand you can see these are all under\nconfigured now you also see that these\nnames match the names here clean\nfunctions build functions\nuh clean release and this is inside of\nthat tastics.json so very similar to the\nlaunch.json that configures your\ndebugging tasks\ntasks that Json will configure your\nother types of tasks like cleaning\nbuilding\nand running and releasing publishing\ntypes of tasks depending on the stack\nyou're working with you'll have\ndifferent and there are a bunch of\ntemplates that exist out there that\nalready defined tasks that are pretty\nnormal or pretty standard with the stack\nthat you're working with for example for\nfunctions cleaning building publishing\netc etc are pretty standard to be run\nthis way\nso keep in mind tax that Json will\nconfigure that\nthose tasks and that functionality\ninside of vs code okay let's continue to\nthe infra folder here we have a main dot\nbicep and resources dot bicep and you\ncan see as soon as I clicked one of\nthese at the bottom right inside of my\nGitHub code space it says launching\nbicep language service bicep is a\ninfrastructure as code language built on\ntop of arm which stands for Azure\nresource manager remember that\neverything in the cloud is essentially\ninteracting with an API whether you are\nusing the UI so you're in the Azure\nportal if you're using the Azure CLI if\nyou're using one of the SDK software\ndevelopment kits which are ways of using\nprogramming languages to work with your\nCloud platform it all ends up\ninteracting with an API so it ends up\ninteracting with code okay\nand Azure resource manager is\nessentially that API\nbicep is an abstraction on top of arm\nwhich is meant to make working with arm\na lot easier because arm is Json and\nJson is not a very human friendly\nlanguage but bicep is a lot more\nstraightforward to use and people who\nhave worked with arm a lot tend to agree\nwith this opinion\nwe have main.bicep which you can think\nof main sort of like your main method\nwhen you're programming your main method\nbecomes the the the pieces of or I guess\nthe lines of code that call the other\nmethods and the other functionality but\nit itself doesn't really do anything\nit just orchestrates right so very\nsimilar to main dot bicep\nand in here we have a Target scope which\nwe are targeting subscription\nand then we have\nour location we have uh we're creating a\nresource Group here everything inside of\nazure needs to live inside of a resource\nGroup\nand then finally we're telling bicep we\nhave a module called resources inside of\na resources.bicep file and we're going\nto need you to work with that and then\nwe're outputting some\ninformation to the console and available\nin the deployment logs once it is\ndeployed and once we run this file\nthen we have resources.bicep which we\nare referencing here remember\nresources.bicep is going to describe all\nthe resources that we need to deploy\nso remember in that architecture diagram\nthat I showed at the beginning we\nmentioned that we need a storage account\nand we have parameters for the app name\nfor the storage account type\nfor the run time of the API for the\nfunction app name hosting plan and a\ncouple other variables that live here on\nthe top\nthe First Resource we're deploying is a\nstorage account\nand we're using variables that we've\ndefined up here to fill in the details\nhere\nwe also need a blob service which is\npart of the storage account\nand then we are creating a container\ninside of that blob storage which is\ninside of that storage account\nfinally we're creating a hosting plan\nfor our Azure function\nthen we're creating our function itself\nand we are defining a couple of app\nsettings that are specific to deploying\nan Azure function with.net 6 out of\nprocess\nwe are also configuring application\nInsight oh one thing I should mention is\nan app setting inside of this function\nis azure web drop storage which is\nreferencing the same storage account\nthat we are creating up here\nright here right\nbecause we are uploading our file here\nso we need to make sure that it knows\nwhere to look for that information\nfinally we like I mentioned we're\ncreating an application insights\ninstance so we can do monitoring\nand we are outputting or printing uh\nsome more information here so for\nexample the search account name the\nfunction app name the function URI\nthat's our infra folder\nand the SRC which stands for Source we\nhave our actual API\ninside here we have the get resume.cs\nwhere is where the actual Azure function\nlifts and there's only one function in\nhere\nbut function projects or function files\ncan contain as many functions as you'd\nlike but we only have one called\nget resume now this isn't a Azure\nfunctions developer tutorial or course\nso the code is very very simple what it\ndoes is it has an HTTP trigger defined\nright here\nso that means that this code is going to\nexecute when we visit the endpoint or\nits URL\nas soon as it's executed what it's going\nto do is get a blob input so it's going\nto go to that blob container we created\nand then go to the folder resume\nand then find the file my resume.json\nand grab all of that content and save it\ninto a string\ncalled my resume\nthen it's going to print the console\nsomething like this text inside of here\nit's going to create a response with an\nHTTP status code dot okay and then to\nthat response it's going to add the\nheaders\nbasically is telling it hey I'm going to\ngive you Json information\nand we're going to write the information\nthat that contains\nthe Json which is that string right the\nbody of our file is inside of the string\ncalled my resume so we're going to add\nthat resume to our response and they're\ngoing to return our response\nvery straightforward and simple code\nhere and perhaps in later on courses we\ncan build on this that's my actual goal\nis to build on this project\nso you all can get Hands-On on not only\nimplementing a straightforward and\nsimple project but also how you can\nrefactor potentially later on\nadd more things perhaps this is the\nfirst part of a microservices project\nwho knows we'll see what happens\nbut that's our code here\nwe also have a host.json file\nwhich configures how the host of our\nAzure function Works in this case\nit tells logging or using application\ninsights and it's setting the sampling\nsettings here\nand depending on how much logging\ninformation you want sent to your\nfunction you would configure different\nsettings in here as well\nwe can also configure how our extensions\nextensions are the triggers and bindings\nso in ways that we can get information\nin and information out of our functions\nwe can configure them in here\nthe only configuration I have is for our\nHTTP extension our route prefix we want\nit to be empty by default it's API and\nyou don't even have to Define it because\nthat's just a default but if you want\nthere to be no API there we're going to\nremove that I'll show you what this\nmeans once we deploy it\nnext we have our local Dot settings.json\nlocal.settings.sample.json\nand this file is where we save all of\nour configuration settings so any\nconnection strings any secrets that you\nneed to work with if you're developing\nlocally\nor not in production you would save them\nin here but this file does not get\ndeployed to production so keep that in\nmind\nthere are other ways and in fact if we\ngo to the info folder in the resources\nremember I showed you that\nwhen we're deploying the function we're\nsetting one of the app settings to\ninclude the value for Azure web job\nstorage so you see this\nand it's grabbing the the storage\naccount name which is a search account\nin production once it gets deployed\nand grabbing that connection string and\nit's putting it in this Valley you see\nthis value Azure web job storage matches\nthis local dot settings.sample.json in\nhere Azure webjob storage we just don't\nhave that\nkey here quite yet\nbut we'll put that in later but remember\nthis local sings that sample.json is for\nlocal\ndevelopment only okay then we have a\nprogram CS\nwhich is specific to the net Azure\nfunction and this school configure how\nour function works if you use dependency\ninjection you need to set up any\nmiddleware or things of that nature you\nwould use your program at CS for that\nfinally we have our DOT CS proj which\ndefines different settings for the\nproject\nfor example the namespace any packages\nyou'll need to use I already have a\ncouple in here that we're going to need\nto use\nand where you can find your local that\nsays.json and things of that nature\nalrighty\nand finally in here I have the diagram I\nhave the my resume Json sample file and\nthen read me with instructions\nand that's about it for the directory\nstructure okay speaking about the readme\nwe're going to click on the top here it\nsays open preview to the side and then\nwe're going to be able to see the\nmarkdown in a little bit more of a\neasier to read fashion I'm also going to\nclose this here\nand we've already covered how to get\nstarted so now we can move into how to\nauthenticate with your Azure environment\nuh since we aren't code spaces we're\ngoing to have to use these First Command\nhere and we can just copy these things\nhere so AZ login\nI'm going to be using the CLI to\ninteract with Azure sometimes I might\nhave to reference something in the\nportal but I'll try to use that the\nleast my goal is to give you all the\nmost efficient way or a more efficient\nway than clicking around the portal and\nusing clis using sdks using different\ndevops practices\nis always going to be better than\nclicking around in a portal okay so\nfirst we're going to copy that I\nmentioned you need to have an Azure\naccount or else you won't have anything\nto log into\nyou're going to click\nenter I guess you're going to hit enterand this is going to give you a code and\na URL for you to go and visit\nthat URL is right here I'm going to\nclick on that and then provide that code\nso I'll be right back\nokay I've successfully logged in and it\nshould give you an output of all your\nsubscriptions in Json as you can see it\nhere\nnow if you do AZ account list dash dash\noutput\ndash dash output and then table it's\ngoing to give you a list of all the\nsubscriptions that you have available so\nnow what you have to do is AZ account\nset Dash subscription\nand this is going to allow us to set\nwhich subscription we want to work with\nin my case I want to work with visual\nVisual Studio\nenter prize\nsubscriptionfantastic and now if I do AZ account\nshow\nif you do Dash o that stands is the same\nas doing dash dash dash output but you\ncan also just do Dash o safety time\ntable this is going to show you the\nsubscription that is set for you to work\nwith which we just set right and you\njust want to make sure that that name is\nthe account that you want to work with\nokay\nso now that we've authenticated with our\nanimation environment we can go ahead\nand use the CLI to provision resources\nwhich is the next step\nokay so as a heads up and you can see I\nhave the note written here I've set the\nresource Group name to be RG Dash\nserverless resume API okay so keep that\nin mind so if I don't set that value\nanywhere it's because I've configured it\nalready I've also provided us those\ninfrastructure as code files which is in\nthat infra folder those two bicep files\nthat we went earlier so now we can\ncreate a deployment by copying this\ncommand here\nand the only thing we have to change is\nthe region I'm going to use East U.S\neast us2 because that's the region\nthat's closest to me but you can go\nahead and type in the region that works\nbest for you we're going to hit enter\nand this is going to ask us for our\nregion once more because our\ninfrastructure files are asking for that\nEast us2\nand then this is going to go ahead and\ncreate everything that we have defined\nin those\ninfrastructure s code files and this is\nwhy a devops practice like\ninfrastructure as code is so crucial to\nbecoming efficient in building efficient\nSolutions and infrastructures in Azure\nor in cloud in general\nif you didn't have something like this\nin place you would have to manually go\neither use individual commands or some\nsort of programming language or click\nthrough the UI which is the worst option\nto create everything you need but since\nwe have files that are already\ndescribing via code what we need we can\njust run a command to use those files\nand deploy everything for us\nso I highly recommend this is something\nthat you implement even if your projects\nare straightforward\nalso you never have to come up with\nthese from scratch there are so many\ntemplates that you can use to start off\nwith for example this one here I found\nsome are probably on GitHub or maybe\neven even in the official Azure\nfunctions documentation\noftentimes services will provide\nexamples of different infrastructure as\ncode languages two go ahead and use this\ntemplates to deploy those things all\nright so we got some output and we see\nprovisioning State here at the bottom to\nsucceed it so what you can do now is do\na z group\nuh list and then do output table and\nlet's take a look at the list of\nresource groups that we have available\nin our\nsubscription\nand you can see here we have the RG Dash\nserverless resume API so it was created\nsuccessfully fantastic so we're going to\ncopy this next command here that's AZ\ndeployment group show\nwe're providing the resource Group that\nwe've created and then we need the\ndeployment called resources and then\nwe're going to query for\nproperties.output because this command\nis going to give us the values for our\nstorage account and function app name\nand that's because remember at the\nbottom of those files I said there are a\ncouple of outputs and these will be the\noutputs in the deployment logs well\nwe're going to query for those outputs\nnow so we have our function app name\nand the values here we have our function\nURI here and then storage account name\nso what I'm going to do\nis create function app name variable and\nthen set it to this value here\nso I'm just going to copy this herethen I'm going to type in function URI\nand then copy this value here\nand then I'm going to create storage\naccount name so we are sending variables\nand this is specific to bash\nto The Bash shell and not to the Azure\nCLI\ngreat so the reason I did that is\nbecause now I can do Echo and then do\nfunction I think I called it function\napp name and then it's going to provide\nme that value Echo\nstorage account name and the values\nthere as well so I don't have to\nremember this memorize this I can just\nuse these variables here now fantastic\nso now we need to upload the sample Json\nfile that I provided so that my\nresume.json\nto the newly created blob container so\nwe're going to copy this value here\nor this command here paste it in here\nand we're just going to\nreplace the parameter values so for\nexample the first thing is account name\nand we're going to use that variable\nstorage account name\nthe container name is resume the name is\nres my resume.json in the file is the\nfile the path is also my resume.json so\nthat's all we need to change\nso we're going to hit enter\nand there we go that has uploaded for us\nso here it says it gives you a little\nwarning about authentication but since\nwe're using the CLI it's going to work\nfine for us\nand in our local dot settings.json we\nneed to add the storage account\nconnection string remember I mentioned\nthat when we're working locally even if\nit's a cloud development it's not in\nproduction so we're using GitHub code\nspaces now but it's still considered not\na production because we're developing\nright\nso inside of this file we need to give\nthis Azure web job storage a value\nbecause right now it's blank\nalso one thing I forgot to mention is we\nhave to right click and rename this so\nwe just have to remove the sample from\nthere so it needs to be\nlocal.settings.json okay because that's\njust the format that they use for that\nfile okay so now back to our readme we\ncan close we can go back in here\nand we're going to copy this command\nhere as well\nand for the storage account name we're\ngoing to use that variable once more\nand it would be storage remember to use\nthe dollar sign there at the beginning\nbecause that tells our\ncommand line that we are using a\nvariable and the resource Group is\nrg.serverless\nresume API I need to update that in the\ndocumentation here\nwhere'd it go\nRG dot serverless resume API I'll make\nsure to push that update there too okay\nand then you're given a connection\nstring value so you're going to copy\nwhat's in the double quotesactually you can copy the whole double\nquotes there just copy everything that's\nhere\ngo back to your local settings.json\nremove the double quotes there and then\npaste it in there perfect now your value\nis in there\nfantastic and now we can run and debug\nso remember I mentioned that we have\nthese debugging tasks\ninside of the launch.json and that when\nyou go to run debug tab here this drop\ndown what is in here matches what's in\nhere well now we should be able to hit\nrun here\nand because we have everything\nconfigured correctly this should work\nfor us locally\nso our Command here is going to now\nreturn us a function URI\neven though this is working in the cloud\nwith GitHub code spaces this again still\nis considered a development environment\nso as soon as you stop debugging this\nthe URI or the URL will disappear\nand it will stop working correct so\nyou're going to get this your\napplication running on Port 1771 is\navailable\nsee all forwarded ports and you can open\na browser or you can control click herethere you go follow link and you can see\nit's\nI did some redirecting for us that's\nsome code Space Magic and you see our\nAPI is here as well so I think if I copy\nthis and if I do something like let me\nopen up another terminal here\nI do curl curl curl might not be\ninstalled here\noh it was and you can see it is\nreturning us some information here let\nme see what happens if I do curl here in\nmy terminal\nand we also get some information\nreturned here so we do get our API uh we\ndo see that our API is in the URL that\nthe code space is generating for us okay\nso now what we can do is we can\nconfigure our CI CD with GitHub actions\nso we can actually see this thing in\nproduction I'm going to go ahead and\ndisconnect the debugger so that'll stop\nrunning it for me\nand we're going to close this message\nhere and then this should also not work\nanymore because\nthe debugger stoppedinteresting well this isn't going to do\nup to date\nuh keep that in mind okay so now we need\nto get the functions published profile\nbecause I mentioned that when we go into\nour\nGitHub build.eml at the bottom it's\nusing a published profile to know where\nto publish to in Azure functions so\nlet's close this here and we'll close\nthis here and we're going to copy this\nCommand right here actually I'm going to\nmake this\nrg. serverless resume API because I know\nthat is the value of the\nresearch group name paste this in here\nand the only thing here I need to change\nis the function name which again we\nsaved in that shell variable that is\nfunction\nuh name and let's go ahead and run that\nand we are attaching the dash dash XML\nwhoops what happened to your function\napp name do we not have that\nfunction app name no function app\nfunction what did I call it function\nname\noh it looks like the oh hold on I mean\nthe wrong one I need to be over here my\nmistake yeah so it's an environment\nvariable but that\njust to that environment and you could\nhave a bunch of terminals but each\nexists in its own environment so you see\nthat I had a different shell open here\nso\nthe\nenvironment variables don't save you can\nhave configure it to save across\nenvironments but that's not the case\nhere so function app name so this is\njust local so here it is okay so now I\nhave to\ncopy this\nand then again change that to\nsay the scope of environment variables\nwill depend on if it's local if it's\nGlobal et cetera et cetera function app\nname\nand we can run that\nand you're going to copy everything that\ncomes in here fantastic\nso now you gotta go to your GitHub\nrepository and then we're going to\ncreate a secret named Azure underscore\nfunction app underscore publish\nunderscore profile\nand let's go to here go to settings and\nthen you're going to go to Secrets\nsections\nand I already have one here so I can\njust hit edit and then paste in that\nvalue and hit update secrets and I have\nto authenticate so now we can head to\nthe actions tab\nhere and we can see we have deploy.net\nisolated Azure function\nand this actually matches if we go to\nour build.yaml this name that's up up\nhere\ndeploy.net isolated\nAzure function appokay so because we have it to run when\neither when it's manually dispatched or\nwhen a push happens to the main branch\nit's going to run so let's do that first\none\nI'm going to click run workflow on the\nbranch Main and hit run workflow and\nwe're going to let it run\nnow also I'm going to do is go to the\nAzure portal go to function apps you\nmight need to search for it and then go\nto the Azure function that's inside of\nthat Resource Group that we created\nclick on that there\nand on the left side we see functions\nnothing is here because nothing has been\ndeployed yet\nlet's go back to that build in the\nactions let's click on it here and it's\nyellow status right now it's saying\ndeploying to Dev so let's give it a few\nmomentsit looks like our action has run\ncorrectly\nset up job check out looks like we've\ngot check marks on everything and you\ncan expand these and take a look at more\nof what happened in each one of those\nindividually\nso let's go back to our function up here\nand let's hit refresh here\nwe might actually need to refresh the\nwhole page Let me refresh this\ngo back to our function\nlet's give it one more second hereto play one I mean refresh it once more\nand here it is get resume which is the\nname of our function remember\nand now if I click on here and then I\nclick on Code test you can get your\nURL but also uh we I guess we can just\nclick on here\ncode plus test this is going to load\nsome information on our function then we\ncan click get function URL copy this\nhere and then paste in here\npaste and gooh actually see this is not gonna work I\nthink I found a bug that I'll have to\ntell the team because my host.json\nspecifically says that this function\nshould not use the API prefix so if I go\nhere\nand remove the API we can now see that\nour API information is\nour resume information is now displayed\nto us in API in our function API\nso that was interesting this URL does\nnot work\nuh let's go back to the function itself\ngo to overview and then you have your\nurl here\nand you see here your functions 4.0 app\nis up and running so it's a little\nconfusing with the wording of functions\na function project can contain multiple\nindividual functions\nso for example this is a function app\nthis is a function project and the URL\nto the whole thing is here and then\nfunctions you can have a bunch more in\nhere and each one itself will have a URL\nas well it's usually I mean it's always\ngoing to be\nthe function app project URL slash the\nname of the function you may have\nprefixes there as well\nokay so now we have our resume API in\nproduction now if you do something like\nuh curl now\ncurl and provide that you can see that\nour content is here as well lovely\nand this is now an in production\nand in your Azure API if you do curl\nDash X and then provide get and then the\nURL of your\nfunction\nand you will get the Json information\nreturned to you and I should have shown\nthat when I was running the curl\ncommands before but\nbetter late than never now I did mention\nthat the GitHub action so the cicdi\npipeline will also run when I make\npushes to the main branch\nso let's go back here and I'm just going\nto run a git status because I'm sure\nI've changed some things\nso I modified the readme with\ninstructions and then I deleted this\nfile here well I ended up renaming so\nwhat I'm going to do is do git add\nand then we're going to add my changes\nand then hit commit\nand the updated readme\nnow I can do git push\nand we see that the push was done to our\nmain branch because I am on my main\nbranch and then if I go back here to my\nGitHub actions we can see that the\naction the deploy.net isolated Azure\nfunction action is running\nand it's running because I made that\npush with the commit message updated\nreadme\nto that Branch so it's going to run as\nwell now I actually do have to make one\nmore change here\nand I have to rename this back to\nlocal.settings.sample.json because if\nnot\nthe git ignore is going to tell GitHub\nand git to ignore the localized things\nthat Json and then this file won't\nappear for you all but I'll make that\nchange\nin the well outside of this video but\nyeah everyone that is the end of this\nmicro Cloud project and I would highly\nrecommend building this one because I'm\ngoing to be building more micro projects\non top of this oneand that's it uh now you have a cloud\nproject in your GitHub in production and\nI hope you got Hands-On and you learned\nsomething new\nalrighty I'll see you in the next one",
  "key_phrases": [
    "visual Visual Studio code",
    "Version Control GitHub actions",
    "API Azure blob storage",
    "blob storage binding",
    "name label image",
    "def container extension",
    "curl Dash X",
    "Azure serverless services",
    "vs code extension",
    "two hours time",
    "container.json file",
    "Docker BS code",
    "infrastructure s code",
    "cloud development environment",
    "GitHub code spaces",
    "micro Cloud project",
    "micro service",
    "curl command",
    "Azure functions",
    "GitHub workflow",
    "Dev container",
    "Azure account",
    "GitHub account",
    "new style",
    "back end",
    "nitty-gritty details",
    "individual technology",
    "continuous integration",
    "continuous deployment",
    "CI CD",
    "HTTP trigger",
    "private browser",
    "local options",
    "left side",
    "four cubes",
    "API format",
    "additional project",
    "resume API",
    "other projects",
    "dummy data",
    "loading screen",
    "code bicep",
    "resume information",
    "Json information",
    "everyone",
    "videos",
    "goal",
    "something",
    "production",
    "afternoon",
    "weekend",
    "hands",
    "amount",
    "solution",
    "pennies",
    "worries",
    "budget",
    "case",
    "portfolio",
    "sample",
    "need",
    "possibilities",
    "course",
    "specific",
    "GPS",
    "devops",
    "practices",
    "files",
    "instructions",
    "everything",
    "repository",
    "lot",
    "value",
    "things",
    "pieces",
    "language",
    "example",
    "types",
    "default",
    "copy",
    "fork",
    "cone",
    "Main",
    "extensions",
    "little",
    "GitHub actions CI CD pipeline",
    "core CLR request type",
    "Ubuntu Dev environment steps",
    "dot Dev container directory",
    "RCI CD pipeline",
    "dot GitHub directory",
    "Cloud development environment",
    "RBS code environment",
    "main dot bicep",
    "Azure functions C",
    "Azure function project",
    "Azure functions action",
    "clean release functions",
    "dev containers",
    "workflows directory",
    "net environment",
    "debugging tasks tasks",
    "getup actions",
    "Azure count",
    "continuous integration",
    "continuous deployment",
    "manual way",
    "big part",
    "left side",
    "process ID",
    "debugging behaviors",
    "deploy subpath",
    "different types",
    "cleaning building",
    "publishing types",
    "building publishing",
    "clean functions",
    "overall project",
    "project language",
    "project runtime",
    "Docker files",
    "code spaces",
    "little bit",
    "bash command",
    "programming debugging",
    "different tasks",
    "other types",
    "infra folder",
    "workflow dispatch",
    "build.yaml",
    "Json information",
    "image",
    "bunch",
    "prereqs",
    "configurations",
    "extensions",
    "top",
    "everything",
    "summary",
    "course",
    "structure",
    "cicd",
    "case",
    "pushes",
    "moment",
    "app",
    "API",
    "jobs",
    "6.net6",
    "profile",
    "context",
    "mind",
    "vs",
    "recommendations",
    "attached",
    "name",
    "right",
    "launch",
    "settings",
    "example",
    "things",
    "solution",
    "control",
    "Mac",
    "Funko",
    "tastics",
    "stack",
    "templates",
    "tax",
    "functionality",
    "resources",
    "SDK software development kits",
    "function app name hosting plan",
    "Azure functions developer tutorial",
    "HTTP status code dot",
    "bicep language service bicep",
    "human friendly language",
    "search account name",
    "web drop storage",
    "main dot bicep",
    "Azure resource manager",
    "application insights instance",
    "GitHub code space",
    "storage account type",
    "same storage account",
    "actual Azure function",
    "couple other variables",
    "resources.bicep file",
    "blob service",
    "many functions",
    "HTTP trigger",
    "code language",
    "Azure portal",
    "Azure CLI",
    "app settings",
    "main.bicep",
    "other functionality",
    "resource Group",
    "First Resource",
    "blob storage",
    "actual goal",
    "main sort",
    "main method",
    "one function",
    "function projects",
    "function files",
    "bottom right",
    "programming languages",
    "Target scope",
    "deployment logs",
    "architecture diagram",
    "run time",
    "one thing",
    "infra folder",
    "blob input",
    "simple code",
    "API bicep",
    "actual API",
    "Cloud platform",
    "blob container",
    "simple project",
    "folder resume",
    "Json information",
    "infrastructure",
    "top",
    "arm",
    "everything",
    "UI",
    "ways",
    "abstraction",
    "people",
    "opinion",
    "pieces",
    "lines",
    "methods",
    "subscription",
    "location",
    "module",
    "console",
    "beginning",
    "parameters",
    "details",
    "part",
    "net",
    "process",
    "monitoring",
    "example",
    "URI",
    "SRC",
    "cs",
    "lifts",
    "course",
    "endpoint",
    "URL",
    "content",
    "string",
    "something",
    "text",
    "response",
    "headers",
    "body",
    "straightforward",
    "Hands",
    "refactor",
    "things",
    "AZ account list dash dash output",
    "Azure web job storage",
    "Azure webjob storage",
    "safety time table",
    "AZ account show",
    "storage account name",
    "resource Group name",
    "DOT CS proj",
    "net Azure function",
    "serverless resume API",
    "local Dot settings",
    "Json sample file",
    "host.json file",
    "Azure account",
    "AZ login",
    "search account",
    "Azure environment",
    "sample.json",
    "first part",
    "application insights",
    "extensions extensions",
    "HTTP extension",
    "route prefix",
    "info folder",
    "local sings",
    "dependency injection",
    "directory structure",
    "open preview",
    "little bit",
    "First Command",
    "animation environment",
    "next step",
    "Dash subscription",
    "sampling settings",
    "app settings",
    "microservices project",
    "other ways",
    "connection string",
    "program CS",
    "Visual Studio",
    "configuration settings",
    "code spaces",
    "different settings",
    "efficient way",
    "case",
    "information",
    "triggers",
    "bindings",
    "functions",
    "default",
    "secrets",
    "production",
    "mind",
    "fact",
    "resources",
    "value",
    "Valley",
    "key",
    "development",
    "school",
    "middleware",
    "things",
    "nature",
    "example",
    "namespace",
    "packages",
    "couple",
    "diagram",
    "instructions",
    "readme",
    "top",
    "side",
    "markdown",
    "fashion",
    "CLI",
    "something",
    "portal",
    "goal",
    "sdks",
    "practices",
    "URL",
    "subscriptions",
    "prize",
    "note",
    "official Azure functions documentation",
    "storage account connection string",
    "Azure web job storage",
    "AZ deployment group show",
    "variable storage account name",
    "function app name variable",
    "infrastructure s code files",
    "East U.S",
    "The Bash shell",
    "local dot settings",
    "serverless resume API",
    "GitHub code spaces",
    "two bicep files",
    "sample Json file",
    "container name",
    "z group",
    "resource Group",
    "function URI",
    "Azure CLI",
    "code languages",
    "infra folder",
    "infrastructure files",
    "efficient Solutions",
    "individual commands",
    "programming language",
    "worst option",
    "different infrastructure",
    "provisioning State",
    "deployment logs",
    "blob container",
    "right click",
    "first thing",
    "one thing",
    "output table",
    "cloud development",
    "parameter values",
    "next command",
    "kay",
    "mind",
    "region",
    "everything",
    "practice",
    "infrastructures",
    "something",
    "place",
    "sort",
    "UI",
    "projects",
    "scratch",
    "templates",
    "example",
    "services",
    "things",
    "bottom",
    "list",
    "subscription",
    "Dash",
    "properties",
    "couple",
    "outputs",
    "variables",
    "reason",
    "Echo",
    "path",
    "little",
    "warning",
    "authentication",
    "fine",
    "production",
    "format",
    "readme",
    "dot serverless resume API",
    "dash dash XML",
    "code Space Magic",
    "GitHub code spaces",
    "connection string value",
    "research group name",
    "function app function",
    "function app name",
    "resource Group",
    "Azure function",
    "function name",
    "dollar sign",
    "double quotesactually",
    "debugging tasks",
    "debug tab",
    "CI CD",
    "GitHub actions",
    "published profile",
    "oh hold",
    "wrong one",
    "different shell",
    "GitHub repository",
    "underscore profile",
    "Secrets sections",
    "actions tab",
    "Azure portal",
    "function URI",
    "local settings",
    "shell variable",
    "update secrets",
    "environment variables",
    "curl curl",
    "command line",
    "main branch",
    "functions",
    "storage",
    "beginning",
    "documentation",
    "everything",
    "json",
    "launch",
    "matches",
    "cloud",
    "development",
    "application",
    "ports",
    "browser",
    "link",
    "redirecting",
    "something",
    "terminal",
    "information",
    "production",
    "debugger",
    "message",
    "mind",
    "bottom",
    "mistake",
    "bunch",
    "environments",
    "case",
    "scope",
    "edit",
    "build",
    "net",
    "push",
    "run",
    "workflow",
    "apps",
    "function app project URL",
    "micro Cloud project",
    "Azure function action",
    "micro projects",
    "function project",
    "Azure API",
    "functions 4.0 app",
    "left side",
    "check marks",
    "Dash X",
    "cicdi pipeline",
    "next one",
    "main branch",
    "API prefix",
    "yellow status",
    "commit message",
    "localized things",
    "individual functions",
    "API information",
    "GitHub action",
    "function URL",
    "function API",
    "resume information",
    "Code test",
    "Json information",
    "actions",
    "build",
    "Dev",
    "momentsit",
    "job",
    "everything",
    "look",
    "refresh",
    "page",
    "name",
    "paste",
    "bug",
    "team",
    "host",
    "overview",
    "little",
    "wording",
    "multiple",
    "example",
    "bunch",
    "prefixes",
    "production",
    "something",
    "content",
    "curl",
    "commands",
    "readme",
    "instructions",
    "file",
    "changes",
    "push",
    "net",
    "settings",
    "video",
    "end",
    "top",
    "oneand",
    "Hands"
  ]
}