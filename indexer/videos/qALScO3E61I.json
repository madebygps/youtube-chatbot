{
  "id": "qALScO3E61I",
  "title": "Linux Bash for beginners 2022",
  "transcript": "i am a massive massive massive fan of\ncommand lines i think is it it's such an\nunderrated skill set i think if you if\nyou're looking to get into any text any\nlike tech engineering focus role um\nespecially cloud computing you're going\nto do yourself with this service if you\nare not comfortable with a command\nor a command line right command line um\nso let's dive into this theory for it's\nreal quick before we actually get like\ninto the commands right so what is a\ncommand line interface oftentimes you'll\nsee this or no actually always you'll\nsee this shortened to cli so you hear\nthings like azure cli docker cli and\nthings like that um so anyway command\nline interface cli it is a text based\nprogram that allows us to perform\nactions via commands and oftentimes\nyou'll hear sometimes you'll hear like a\ncommand line\nbash shell terminal these terms like mix\nin so someone maybe try r\nmaybe they're talking about like\na com i don't know\na command line when they're really\nreferencing like a terminal but this is\nwhy i'm trying to summarize it's the\neasiest way i can so command line\ninterface uh be a text-based program\nwhere we can perform actions via\ncommands right\nand that's like stuff like azure cli um\ni can do like azure help this is how i\ncould work with azure um there's also\nlike dockeruh press spell right yeah correct docker\nthings like that right so and then\nalmost any cloud service that you work\nwith is going to have a cli it's\nbasically a way to work with something\nvia these commands via\nthis thing you hear right\nwhat is a shell\nso i think people get a little confused\nbetween like cli and shell the most\nand shell is a program that allows us to\nrun commands and if those commands are\nbuilt into the shell themselves you can\nrun those or it's a way to actually run\nyour clies right so i have i'm using a\nbash shell right and i can use this to\nexecute my azure commands my docker\ncommands my kubernetes commands whatever\ncli it is that i'm working with right\nwhen it comes to unix systems so linux\nmac os things like that right\nthere are many different unix shells but\nthey all derive features from the born\nshell which is the it's sh for short\nright\num\nand you know that's what we're going to\nbe working with today right\nwhat is a\nterminal okay so a terminal often\ntimes you know so you'll say terminal or\nyou say console so terminal is the the\nprogram the sort of thing that we use to\naccess a shell to run a shell to run\ncommands so the gui part so this program\nfor example windows terminal i have open\nhere on the left side this is a terminal\nsometimes there's also console which i\nthink consoles is more like the physical\nlike there's actually a physical thing\nthat i can touch to access these\ncommands right\num but these days it's more of like\na ui so windows terminal there's there's\nquake that i've used a lot on like\nubuntu popos item 2 i think is one of\nthe most popular ones for um mac\nthings like that right\nand uh let's talk about a shell script\nokay scripting everyone knows scripting\nis a very very important skill set um\nand what exactly is a shell script so\nessentially it's a text file that can\ncontains a sequence of shell commands it\nwill write our commands in there and\nwe'll write one towards the end um and\nwe can execute them we'll execute the\nthe script itself instead of having to\ndo the individual commands because the\ncommands are inside of the text file\nright oh last thing here what is bash so\nlike i mentioned\nthe born shell is sort of like the\nog\nshell that was available for unix\nsystems that is available for unix\nsystems\nbut you know linux has\nmany many many many many many flavors of\nlinux and many many flavors of shells\nand there's one called bash\nbash stands for born\nagain shell so you know b\na and then sh shell so that's where you\nget bashful\nand it's become sort of the de facto\nlike the standard for for working with\nlinux machines linux service and when\nyou think about cloud computing servers\nyou know\nlinux servers like network together\nthat's essentially what cloud computing\nis right yes there's all these\nserverless service services and\nserverless things but under the hood\neverything is pretty much\nlinux servers right so when you think of\nbash um you can almost consider it sort\nof like this\nthe universal language because you can\nexpect it to be at this point where\nwe're in 2022 you can expect it to be\navailable for you on a linux server\nwithout you having to install something\nso you know you don't install python you\ndon't install.net or anything like that\nright it's like on there and if you've\ngot some skills you can like spin up a\nserver and not have to do anything\nbecause you can already like interact\nwith it via a command right or command\nline\nright\nuh okay cool cool cool let's let's dive\ninto some fundamentals so yeah i'm using\nwindows terminal i'm actually using wsl\nand i have ubuntu uh setup you see i\nhave powershell here i have the azure\nclouds too i have git bash ubuntu um you\ncan also access a shell if you go to\nlike shell.azure.com\nand then\nthis is like a cloud shell\nand you have the option to use\npowershell or or bash we're obviously\ngoing to be using bash here i'm going to\nstick with the windows terminal one just\nbecause i've created some files zero\ndate that we're going to be working with\nbut if you don't necessarily want to\ninstall something locally\nand you can use you know your azure\naccount to access this uh pretty neat\nright\nokay cool\nso let's run through the full syntax of\na bash command right so so let's list\nout i have an example here so this ls\nhere\nuh dash and i'll explain it all we'll\nwe'll piece it apart so the first part\nhere is you know we have command\nwe have options and then we have\narguments\nand sometimes you can run commands just\non their own sometimes there's a\nrequired argument sometimes um you know\nyou need to provide the command\nsomething for it to do it can't just\nwork on its own sometimes it doesn't\nneed anything\nand you also have this concept of\noptions which are also referred as you\nknow flags\nand whenever you have like a dash a\nletter or something like that or dash a\nword that's considered an option or a\nflag\nand they modify how commands work so in\nthis case i have ls dash a and then\nslash at c\nuh directory so the ls is the command\nitself this stands for\nessentially listing the contents of the\nargument that we provide here and by\ndefault it will just list the\nthe contents of the current directory\nthat you're in\nand then we have the dash a which is an\noption\nuh which includes hidden files in linux\nanything that's soft starts with a dot\nwhether that be a file or directory\nis considered hidden so when you do a\nnormal ls without the dash a here and\ni'll show you all this i'm just trying\nto explain it beforehand right you're\ngoing to get um the hidden files as well\nright\nso if we do ls a here\nwe can see here we get a bunch of stuff\nthat's in the etsy directory so\nessentially we're telling all right\nlinux\ncan you list\neverything that is in this directory\nhere\nincluding the hidden files and you see\nwe have\nsome hidden files here\nand if i remove\nthe dash a\nuh there we go here we don't get the\nones that start with the dots right\nbut where do we go here see so we don't\nget those one\nokay so essentially that's how you have\ncommands you have your arguments and\nthen you have options that you can\nprovide\nand you can combine options or flags\nthings like that with uh you know just\ninstead of doing it slash\nl\na a\nc like this and the dash l stands for\nit's like a formatting thing i don't\nexactly know maybe it stands for like\ndash long or something like that um so\ninstead of doing them individually we\ncan just do\ndash uh we can do it like a stash\nla slash etsy right things like that\nokay and when it comes to\nlike sort of keeping things um\nconcise\nthis is where like\nbash enthusiasts or people who are\nreally great at bash\ntend to like flex their skills\nbecause there are some really really\nreally impressive combinations of\ncommands out there that you can just\nspend your sort of your career working\nwith bash and like you know 20 years in\nyou'll discover like i had no idea that\nyou could combine things like that right\num it's quite\nit's like an art to an extent like\nworking with a term with commands and\ncommand line and terminal things like\nthat right\nokay cool so yeah we know we can combine\nit and then we mentioned here uh\ncombined and then the long form right\nnow keep in mind you're going to want to\nuse the long form when you're putting\nthings in scripts because it's easier to\nread but if you're doing just one-off\ncommands it's easier to use something\ncombined a little bit more concise right\nbut now you might be asking when there's\nall these commands there's all these\narguments you know and and\nyou know i could probably like learn\nlike you know the list change directory\nprint working directory man command all\nthese kinds of things the ones that you\nuse the most but you know all these\nmaybe have like several options and\narguments to them how am i supposed to\nknow what to do and my friend that is a\nfantastic question\nbecause oh come on i want to install\nthese drivers sorry\nbecause understanding how to read\ndocumentation and how to find help for\nthe commands that you are\nworking with is very very important\nluckily\nlinux has a built-in\ndocumentation or manual for lack of a\nbetter word uh that's called men men for\nsure right so uh here we have sort of\nman and then we just i provided a\ncommand here\nman make oh can we go\nlarge screen i don't know why it went\nsmall one second there we go thank you\num\nso how do we access this well we provide\nthe man command and as an argument we're\nproviding another command\nlet's say man i don't know make dear\nwhich is the make directory\nand you see we getour the name of the command make deer\nstands for make directories a synopsis\nwhich is like a one-liner of how to use\nit make deer options and then directory\nand then description it tells create the\ndirectory or directories\nif they do not already exist\nand then it tells us some arguments some\noptions and things like that right\nfantastic so we know how to access\ncommand and there's a lot in here right\nyou can read a bunch about this um some\ncommands will have more some will have\nless and things like that right\nso that's how you access help now become\nvery very familiar if you're if you are\ntrying to figure out you know how to\nwork with a command you don't remember\nan argument things like that i highly\nhighly highly recommend that your first\ngo to would be\nthe man option the manual page and then\nyou know go you know google or do\nwhatever searches you need to do\num because this documentation is\navailable to you in bash right available\nand anywhere you're working that has\nbash available\nanother neat option for help is the dash\ndash help syntax here i can probably\nmake this a little bigger here this\nsyntax here the cool thing about using\nthis is it's a little bit more concise\nso if i do make deer\nshell\nyou see this is a lot it's a lot shorter\nit almost gives you sort of like a\nsummary\nsometimes the information that you're\nlooking for might not be here right but\nessentially its goal is to have sort of\nlike oh the most like important\ninformation extracted from man\nnow what i really like about using this\ndash dash help option\nis\nwhen you're working with other clies\nit's sort of a standard that you can use\ndash dash help to help you figure these\nyou know commands out in other clies\nwhen you're not working necessarily with\nbash commands for example if i use the\nif i'm new to azure and i want to use\nthe azure cli which is a z you'll have\nto install it of course but then you can\nuse az\nand i'm like all right i know i know i\ncan access the azure cli using az but\nlike i don't know anything else right so\ni can provide\nhelp\nand then we get a list of help things\nright\nit's still on us here\nwe got here uh all right we can work\nwith openshift we can use app config we\ncan work with groups uh we can work with\nuh you know a bunch of things in this\nlist too all right so say i find the\noption the command that i want to work\nwith i want to work with az account\nbut i don't know anything else well i\ncan continue to provide the dash dash\nhelper and it will continue to give me\nthe documentation that is specific to\nthat chain of commands so this isn't the\ndocumentation to a z cli this is the\ndocumentation to easy account specific\nto that and now great i see a z\ni don't know what i want to do like easy\naccount like oh i say i see list here so\nif i do a z account list all right i\nhave a better idea what i want to do but\ni still don't know exactly i can provide\nhelp once more and it's again\ndocumentation specific to that\ncommand right and this is great and this\nis the same for like if i wanted to work\nwith a docker uh cli\nhelp and then i get\ndocumentation relevant to that right and\nthis is all built into these clies like\nthe documentation itself is up to the\nyou know\ni guess projects or companies that\ncreate these clies like they have to\nkeep up to date and you know make sure\nthey provide great um documentation uh\naccess to the other help the cool thing\nabout like for example the azure one\nazure i don't know vm\nhelp is like sometimes they'll give you\nexamples as well like you can find it\nsays here for more specific examples use\nazvm like if i did\na zvm create\nhelp i'm pretty sure it's going to give\nme some examples of like create multiple\nvms with this command create a vm in an\navailability zone with this command and\nthings like that which when you're\ngetting started and you don't know how\nto put these things together you can\njust copy and kind of work with it right\nso that's the good part about that so\nall right we know how to get help things\nlike that we know how to get help with\nother clients and stuff like that let's\ntalk a little bit about wild cards\nsometimes called\nmeta characters\nthough i don't think i've ever heard\nmeta characters um i've always usually\nheard wild cards but anyway\nwild cards are symbols that represent\none or more characters in bash commands\nright so for example\nwhen you're providing a command\nor\nsometimes you're\nlooking for something or you want to\nwork with something that you're not 100\nsure\nwith the name of it or the extension or\nsomething like that right\nand it would be impossible for you to\neven know where to start because you\ndon't know the full name\nthat's where wild cards come into place\nso for example if we use the asterisks\nit represents 0 or a sequence of\ncharacters 0 or more essentially\ncharacters\nwhen you utilize it so for example i\nhave here\ni have here a bunch of files i've got\nthis one.png i got an output txt i got a\nnano txt in uh text file i got pick one\nthat's a png a pic3 that's a capital jpg\ni don't know what the difference is\nthere i got a j p e g there's another\nextension there too right so i have a\nbunch of files in here too\num\nwhat if i only wanted to list the files\nthat ended in png i don't care what the\nnames actually are i'm just looking for\nthe ones that end in.png\nkeep in mind that extensions and linux\nis a little different so um unlike other\noperating systems linux doesn't really\ncare for the extensions of files it's\nnot that they don't matter it's like it\nlinux sort of assumes the extension via\nthe contents of the file instead of\nactually relying on the extension itself\nso you could name a png file like\nanything else it still would know that\nit's a png but for this example it's\nlike really helpful to like play around\nwith wild cards when we talk about\nextension so that's why i'm using it\nokay\nuh all righty uh so yes we're talking\nabout the ash the asterix wildcard here\nso if i wanted to find the png files i\ncould simply do ls\nasterisk.png\nand it would show me only the ones that\nend in png let me let me do a dash l\nthere dash l there we go only the ones\nthat ended not p and g and now sometimes\ni see people sort of get confused\nbecause this asterisk is though it's\njust one symbol you might think that oh\nit just means like one place like one\nletter like one character but no\nremember it's zero or more characters\nright so that's why it's giving me you\nknow this one has one before the dot png\nthis one has four letters and then this\none has a whole bunch more and they\nstill sort of meet that requirement\nright\nbut what if we were looking for\nfiles that only represent a single\nor like a character like a single\ncharacter right then for that we could\nuse a question mark\nso let's list out these files again and\nsee what we're looking for so say we're\nonly looking for\nuh files that are n in png and that have\njust one digit\nuh you know what we'll probably have to\ncreate another one so if i do pick\none two three dot png\ni'm using the touch command i don't know\nif we have the touch command in the list\nof commands i'm going to go over touch\nis essentially made to modify a creation\ndate of a file but it's often used as\nwell to like create a new file um just a\nlittle fun fact there okay so\nuh let's do ls again\nlisten long here and now we have uh pick\none png peak one two three pick three\npick you know things like that right but\nsay i wanna wanted to find files that\nhave pick one digit\nor one character and then dot png\nwell i could do here ls\nand then the character the question mark\nhere where am i right here this one here\nuh one\npick actually one dot\npng correct here we go\nyou see we're only getting this single\none here because only this one\nfits\nwhat we're looking for right and so just\nunderstand like the question mark is the\nthe one character single character not\nmore not zero one is specific there too\nuh we can also use brackets to denote a\ngroup of characters so say we're looking\nfor all the ones that have dot j or dot\np right and then for that we could use\nls\nand then asterisk because we any it can\nhave any sequence we don't know what the\nname is then it's going to have a dot\nand then it's going to either be a j or\na p\nand then it's going to have more letters\nafter that and we have a bunch here\nlet's do an ls\nl here fantastic we have all of these\nhere too uh but do keep in mind that for\nexample if we do lss l here now we have\nthis capital one here we got these txts\nin here but you might ask all right\nwe're looking for j and p but this\ncapital one j didn't come in there\nand you are right my friend bash\ncommands are case sensitive so in that\ncase if you're looking for it to include\nall of those we would have to do a\ncapital\nj as well here and then a lower capital\np there if we wanted to and then we\nwould get the ones with the capital\nright so keep in mind kane's case\nsensitive right\nas most things are when you're working\nwith uh scripting programming things\nlike that right\noh and could also represent a range with\nbrackets we would have to use the dash\nfor that so if i did ls\nlike just list\na through zwe'd have everything there and if we\nwanted to just the ones that have\ncapital\n[Music]\na through z\noh hold on here we probably have to do\nthis a little different here\nso it starts with anything and then it\nhas an extension that's a capital letter\nyou could probably do it like that and\nthen text after that and then we'd have\nthe capital one two right so range\nranges can be\nsupplied via\na bracket and then these\ndash okay\nokay cool so those are wild cards we're\ngoing to use that\na little bit more uh when we use grep\nfiltering and things like that um\nman man make deer works but no luck no\nluck with make deer help ah that is a\ngood call out some of them will not so\nsome commands won't have man some\ncommands won't have dash help this is\ngreat so for example the cd command is\nhere so if you do man cd you're not\ngonna find cds change directory we'll\ncover this in a little bit uh no manual\nand you see here it says no manual entry\nfor cd that's because you'll have to do\nman built in because cd is it's\nlike an exception to an extent it's a\nbuilt-in command it's not necessarily\nlike a bash command it's more specific\nto like your environment per se\nuh but if we do man built-ins and then\nwe like search for cd if you do slash um\nforward slash in-man you can search uh\nand then we see we have the cd command\nhere and then it's just you know you'll\nhave to search for it and find more\ninformation of it\nuh but yes\nthat is true sometimes there isn't a man\nentry sometimes there's a dash of help\num so you'd have to like go back and\nforth in that um but for the majority of\nthem there it is available okay where\nwere we at all right so we've been\nplaying around with the ls you know we\ncan list commands and like i mentioned\nsome of the popular options are dash a\nto include hidden files and directories\nand dash l to include more info about\neach file which you know we get um\nls.l here we get uh permissions here uh\nwe get uh uh who's the owner\nthe group uh and things like that\ncreation date the\nfile name and that kind of stuff right\num then we have the pw command which is\nprint working directory this command\nwill output where we're at right now\nright i mean my terminal tells us right\nhere but in case\ni needed it to save to a variable or\nsomething like that i could use pwd\nwhich stands for print working directory\ncat uh cat stands for concatenate let me\nmake this\nwe're on this one here at the moment\nright i could probably make this a\nlittle\nright here here here we go okay\ncat stands for concatenate file or files\nto standard output we're going to talk\nabout standard input standard output\nstandard error in a little bit but it's\na fancy way of saying display the\ncontents of a file to the screen\num\nso let me i don't know let's make a file\nlet's let's use nano shadow total any\nnano fans are we uh are we nano versus\nvim versus vi kind of people here and i\ni try to use whatever i remember at the\ncurrent moment right so we're gonna\ncreate a file called hello uh nano\nthat dxd unless i already have one i\ndon't remember if i have one or not uh\nwe're gonna say hello\nnano\nfans right and then we're gonna just\nuh\nsave that there fantastic and then if i\ndo cat which is the concatenate and then\nprovide the file for the\nthe name of the file that we just\ncreated we'll see that it prints out the\ncontents of the file so that's what we\nwould use\ncat for\nwe went over\nuh man already uh we went over cd which\nis oh actually i don't think we did cd\nwill change directories so if i\nuh want and i mentioned oh look i wrote\nit here too i did not remember that it\ndid\nif we needed help with the cd command\nyou have to search for it in the man the\nbuilt-ins manual uh page okay\nuh if we wanted to move up we'll go this\nway right and it looks like i want a\nfolder back so remember when we think of\nlike a file system um it's it's like a\ntree right so if we wanted to move up\nwe're like essentially moving out of the\nfolder right and then if we wanted to go\nhome we could use the tilde here i don't\nwant to go home\ni want to go back into\nthis file uh this folder actually bash\ndemo files here right so that's how the\ncd is how like how you move around right\nright\nmake deer make deer is for us to create\na directory create a folder right so i\ncan do make deer\num i don't know let's say\nthere one and then if i ls you can see i\nhave this dear one here\ni can also do make near dash p which is\none of the popular arguments to pat or\noptions to pass with make deer and that\nwill allow us to create like\nsubdirectories so if i do tier 2 slash\nsub year 1\nnow i do ls you can see ls-l i think\nthis one will show we'll save\n2 has this here too so if i go\nls gear 2 it might be able to show us\nhere and we have we're printing the\ncontents of tier 2 which is the\nsubdirectory tool so pretty handy to\nknow when you need to create\nsubdirectories when you're working with\nthe make to your command\nall right where are we at okay removed\nhere\nremoved here is for us to\ndelete empty directories delete empty\nfolders so since that uh dear one we\ndidn't create anything in it we should\nbe able to just do remove tier one\nfantastic but if i try to do the same\nwith dear what was the other one i think\nwe called the dear two\nyou call it beer two goodness where is\nmy yeah it's youtube so if i do remove\ndear dear too\nwe're gonna get an error\nit's telling us failed to remove dr2\ndirect\ndirectory not empty and that's because\nwe have another folder even though the\nfolder has nothing in it it's still not\nconsidered empty right\nso that is where our remove command\ncomes in handy which is just the rm here\nall right\nuh so let me actually see we got here so\ni'm gonna actually delete a bunch of\nstuff so if i do for example rm\nand then i say one dot png\nand we see we got rid of that too right\nuh and i actually want to remove\nanything that starts with pick and then\nend with literally anything else right\nand then i remove the bunch there so you\nsee how the usage of like wild cards i\njust used that astrix and i got rid of a\nbunch of\nfiles that i didn't want and i also\ndon't want any of these text files so i\ncould probably remove\nanything and that ends with txt and then\nyou see the only thing i have left is\nthis directory right so yeah getting\ncomfortable using wildcards and commands\nit's going to make you much more\nefficient a lot quicker also when you're\nworking with commands right so anyway i\nwas like i was saying how do we remove\nthis directory that has things in it\nwell\nyou should make it a habit to use rm\ndash\ni which means it's going to ask us to be\nprompted every time it's going to prompt\nus every time we need to remove\nsomething\nand then we can use r which is\nrecursively so we can combine these two\nand do ri recursively means it's going\nto like go from subdirectory back up\nright which matters because we have a\nsubdirectory in here too and then we're\ngoing to provide the name of the\ndirectory\noh how do we call this oh it's tier 2.\nup here we go dear 2.\nand here it says descendants into\ndirectory 2. i'm going to hit yes remove\ndirectory gear 2 sub gear 1 and then hit\nyes and then finally it's saying remove\ndirectory 2 yes and this is just you\nknow\ncover our behinds to make sure we don't\ndelete something that we don't need to\ndelete all right\nclick now what do we got here all right\nfinally oh copy files okay so for this\nuh pretty simple it's like kind of like\nright-click copy but uh let's make a\ncouple of files here we'll make a\ni don't know here notes one txt\nand then we'll make a directory we'll\ncall this directory1 and then if i copy\nnotes\nuh notes\ncopy notes 1\ntxt dear one like that\nand then i do ls dear one you can see\nthat notes has been copied from\nits existing place so it's still it's\nstill here it's it's\nstill in this bash demo files directory\nbut we've also copied it over to\nthe um\ndear one directory right so very handy\nthere's also move\nso\nif i did\nhold on let's go into dr1 and then\nremove notes\nright and then we'll go back\nclear this and then if i did move notesnotes there we go two deer one\nyou see we no longer have notes there so\nwe can copy we can move depending on\nwhat you want to do right and then we\ncan move all all that jazz\nalrighty uh we got ps which is used to\nget a snapshot of all currently running\nprocesses we're gonna do exercise with a\nlittle bit more of this um\nin a little bit right so essentially if\ni put ps it's just going to show me the\nprocesses that are running at the moment\nwe have the z shell moving in here and\nthen we got ps as well too um\nall right fantastic um\nsudo so sudo stands for super user do\nand when you're probably gonna hear this\nthis um\n[Music]term word super user uh it's ref it\nmeans\nthe root user right so the user that has\nthe most privilege on on the on the\nsystem\nand there are there are oftentimes\ncommands that you need to run with sudo\nso for example if you want to like\nupdate uh your\njust show your machine you would use\napt-get update but you can see i'm\ngetting here permission denied but if i\ndo sudo\napt get update then i should be able to\nprovide the password to the account\nand then go ahead and update my uh\nmachine\nand\nthere are a bunch of reasons why you\nwould want to use sudo instead of\nlogging into root for example i've got a\nfew uh specified here so if you run\nstuff as root you're not going to have a\nrecord of\npeople who are running these the\naccounts that are running these commands\nin the first place you also don't have\naccess to your normal shell environment\nright\nand most distros are going to use this\npseudo package and allows us to run\ncommands as root though we're still\nourselves right so i'm still made by gps\nbut i'm running as root\num\nso keep that in mind too and we would\npreface the command with sudo and that's\nhow we would do stay super user do this\ncommand right essentially that's what\nit's telling recursively means we're\nlike sort of going into the sub\ndirectories and then moving like we're\nlike looping through that and then we'll\ngo through the directory above it and\nthen above like that right recursively\nyes here we go perfect that's it means\nthe command will go below the current\ndirectory exactly there we go perfect\nright so we'll go into the folder figure\nall the subdirectories out and then move\nour way up into uh whatever the command\nit is that we provided right so\nredirection now this is where you can\nreally start understanding the power of\nthe command line embrace the power of a\npipeline and pipelines are essentially\nput together by commands and using\nredirection right don't worry we'll get\ninto this right\nso input output direction allows us to\nredirect input and output of commands to\nand from places files\nas well as connect multiple commands\ntogether into a pipeline so as a summary\nwhere we have to use this symbol here\nfor rigging directing input to a source\nother than the keyboard\nthis symbol here the greater than for\nredirecting output to destination other\nthan this screen\nif we wanted to append we would have to\nuse two of these here\num so instead of overriding which is\nwith the default when you're redirecting\nstandard output\nyou can append and then we use the pipe\nsymbol or\ncharacter\nfor piping output from one command to\nthe input of another okay\nthere's a little bit of summary but\nwe'll do some examples here so\nredirecting standard output\nzener output also known as st out\nthis right here is the program's result\nso what you see sort of printed out on\nthe screen so when i do\nlike ls here this\nwhat's here this is what's printed out\nit's known as standard output\nto redirect this content so the content\nof like what gets printed what gets\nshown\nto a file instead of like default to the\nscreen we can use the greater than\nsymbol this might have a better name for\nit i know it is greater than it might\nhave a different name\nbut it's also redirection operator\nthe standard output redirection operator\nand the name of the file right so for\nexample if we wanted to\nsay get the\ncontents that is in the\nuh here i've got the\nslash user slash bin which is sort of a\ndirectory where like process like\nscripts and binaries and stuff gets\nsaved to to a file called\nls.ls-output.tathen\nwe could do this command so we'll do ls\ndash l so we'll get the long form of the\ncontent\nfrom user bin\nand go ahead and redirect that output\ndon't send it to the screen\nsend it to this file called\nls-output.txt if this file doesn't exist\nit'll create it for us if it does exist\nit's going to get overwritten right so\nlet's hit that and you see nothing\nprinted out to the screen but if i use a\ngood old cat command here and i provide\nin the file name you're going to see\nthat\nit is now the contents of this file\nclear\nit up too okay cool and if you wanted to\nappend you would use the\nthis one here instead of the other one\nright\nuh how do we redirect standard error so\nstandard error error messages like for\nexample when i got that permission\ndenied message that would uh be like\nstandard error um it's also known as std\nerror\n[Music]\nwe have to use its file descriptor so in\norder to do this uh the shell references\na standard out sd out stdn and scd error\ninternally with its file descriptors so\nzero one and two right so zero you know\nrespectively zero would be sdl one would\nbe st in and then two would be std er\nright\nso we can redirect the standard error uh\nto uh you know some sort of file or\nsomething like that\nwith the\nuh this notation here right\nso for example if i had some sort of\nerror\num\nwe could just do like we'll just do the\ncommand that's in here ls dash\nl slash bin slash user\nand then we do two because it's standard\nerr ls-er\ndot txt and then since uh then we'll do\ncat\nls\nerror here and then we see cannot access\nthis location this is the contents of\nthat because it doesn't exist right so\npurposely we did something that was\nincorrect right uh but you see that when\nwe did that we didn't get the output to\nthe screen because it was redirected to\nthis file right clear\nuh all right i'm trying to like skim\nthrough this again these these links\nwill be available for you to like\nreference later um but yeah if you\nwanted to sort of redirect standard\noutput in standard error it's one file\nyou could use there's i think there's\ntwo ways to do this yeah so in like\nolder systems you would have to use like\nthe redirection\nright and then at the end you would add\ntwo and redirect to one as well so\nremember those are the file descriptors\nuh but in the newer ones you can just\nuse this ampersand and it'll redirect it\nto just keep in mind that in order like\nthe order of the right directions matter\nuh standard error must always occur\nafter redirecting standard output okay\ncool\nuh and finally standard input so\nstandard input typically with like you\nknow commands will be a keyboard\num\nin in order to like i don't know like\ngrab the the content from somewhere else\nlike if you're not using a keyboard you\ncould send it like\nuh i think i have pull on let me see so\nif i did for example cat\nand then\nredirect the standard input from\nlet's do ls error\nyou see it prints it out right instead\nof doing cat file we just redirected the\ninputs like all right your input is the\nfile not the keyboard itself right so\nthat's how you do that one there too\nokay let's talk about pipelines\nso pipeline is sort of essentially us\nchaining commands right so we're\ngrabbing one command and sending its\noutput to another command so the input\nof the other command essentially becomes\nthe output of the first one and this is\nwhere\nyou know bash scripting bash commands\nbecomes somewhat of an art like i\nmentioned earlier because the pipeline's\nout there it's like it's for every\npipeline out there that you are familiar\nwith i'm pretty sure someone has found\nlike a more concise or perhaps a more\nefficient way of doing it\num yeah and it's\nit's really really interesting to like\njust find just look at examples like\nthere's a bunch of like subreddits on\nlike command lines and stuff like that\nand there's much like stack overflow\nthreads on this kind of stuff it's\npretty neat so essentially what we're\ndoing is\nyou know we're using this pipe operator\nfor example this one here\nand we're building\nsort of like chains right\nso we can use the ps command which is to\nview a snapshot of the processes we'll\ndo dash f and then we'll use a command\nthere or like a pipe and then we'll do\ngrep and then daemon\nwhat's going on here is all right we're\ngrabbing the output of this ps command\nand then we're not showing everything\nbecause grab is going to\ngrab that input and then just show us\nanything that matches damon we're going\nto dive into grabbing a little bit uh\nlater then after after this one okay\nuh yeah so pipelines you're just kind of\nchaining things and for example there's\nthis longer one here\nif we cat uh oops clear\nif we cat ls dash uh error you know\nwe'll do this other one ls what's the\nother one called ls output here we'll do\nls output\nand then we'll send it to fmt which will\nformat it for us and then we'll send it\nyou see we'll have like sort of this i\nthink it formats it in paragraphs\nand then if we do\nuh one more here we'll do it in\npr we'll see we have it set i think this\none actually does it in paragraphs let\nme see\nor like principle something like that i\ncan't remember exactly what it does but\nit's like a formatting thing and then if\ni do lpr i think this is like to make it\nuh\nto printable something like so you can\nactually print it um like paper\nactually i guess i don't have it um but\nanyway yeah essentially you're like\ngrabbing output one filtering it\nfiltering it filtering it and we'll see\nthis a little bit more with like a more\nlike\ncommon use case when we use the azure\ncli all right\nterminating a misbehaving process all\nright so we're going to talk a little\nbit about\num\nsort of how we can use the ps command so\nwhen you're working with\nlinux administration linux servers\nyou're probably going to trying to\nfigure out like oh like is there a cert\nlike some sort of service some sort of\nprocess that's going wrong and you kind\nof want to be able to figure it out so\nwe're going to sort of mimic like\nhow to terminate a a misbehaving process\nright so what we're going to do is we're\ngoing to create a file like a python\nscript it's called bad.py right\nand we're gonna use vi in this one here\nso we'll do vi bad dot py\nand here we're gonna have to insert this\ni could probably just copy\nthis herehow do i insert nvi is it just i right\nyeah i think so right\nand then uh what is it to escape\nis it just like\nw q i think that's it right yeah i think\nthat's it\nsorry\nthat's i think that's like one of the\ntech twitter jokes is like i don't know\nhow to like get out of uh uh vm or vi\nand things like that right okay cool so\nwe've created a file okay and it ends in\ny s it's a python thing and we've added\nthis sort of\nprocess that is meant to\ncause some some some craziness to in our\nterminal right uh so we can start this\nby just saying\nbrush python\n3dot p y\np y p y\nand then we're going to use the\nampersand\nthis one here\nuh but what's going on here why can't we\ndo this\noh no should it just be\npython3\nwe don't need bash right there we go\nokay cool um\nso this ampersand means run the process\nin the back so like if i didn't use the\nampersand there it would have\nsort of like taken up the terminal and\nthen i couldn't like type any more\ncommands but now we're running it in the\nbackground right okay cool\nnow uh if we do a little ps here we can\nsee we have this process running and\nwhen i ran this before we didn't have it\nright we see this process running in\nhere too but if we do ps.ef we get more\nsort of information like more process\nnot not just one specific to me or to my\nlike shell it's like sort of all the\nprocess is running too\nnow if we did ps-ef and then we're going\nto do a piper and then grip python we're\ngoing to get just the information\nof the\npython thing and then we can see that\nwell i don't know if y'all can hear my\nthe fans of my computer just kicked on\nuh and then we can see that it's sort of\ntaking up a lot of cpu time it's kind of\nhard to see here because we're like\nreally zoomed in\num\nbut uh\nyeah so\nessentially it's telling us like hey we\nthis process is like going crazy right\nso let's clear this and so how do we end\nthis right\nthere's this command called kill um\nit's just called that you know it might\nbe a little aggressive or something like\nthat but you know who knows if we do\nkill dash l\nwe can see all of the signals that we\ncan send to a process to\nsort of end it or restart it\nand\nyou know i don't know each one of these\nsignals but i know i think the like the\ndefault is uh\nsig um h up or hub i don't know how to\npronounce exactly\num if we wanted to restart it right but\nin this case we want the process to just\nend without\nsort of restarting right so we can just\nuse uh skill\ndash nine\nand then the process id uh i didn't copy\nthe process id let's do ps\nef grip python\nand then the process id looks like it\nis what is the price\n1999.\nhold on i might need to do this a little\nsmaller here\nso i can tell what the process id is\ngrab python\nuh i think it's 99.\nlet's try it kill dash\nuh nine and then it's saying it's 99\nnope it's not 99. i can't tell which one\nit is here uh let's just do ps\ne oh no here it is it's a seven nine\nzero oh it's this one here my bad i was\nlooking at the wrong column all right so\nkill dash nine which is the signal that\nwe want to send the kill command and\nthen we provide the process id which is\n7907 there we go\nso now we do ps we see we no longer have\npython and that's how we end a\nmisbehaving\nright all right our process right\nokay\nlet's talk a little bit about a grep and\nfiltering output and then i i might be\nable to get to the rest of these\nexercises that i have here\nuh but yes anyway great grep is very\ncool grep is very very capable grep\nalongside the awk or awk command are\nprobably two of your best friends when\nit comes to using bash um\ngrab i think stands for like global\nregular expression something i i don't\nknow maybe man will tell us\nrep stands for\nname\ndoes it not tell us\nuh\n[Music]\nmaybe i wrote okay global regular\nexpression print okay i was close let's\nsay that too so say for example we\nwanted to list the vm sizes we have\navailable with azure so i can do azure\nso az which is the ac cli prefix azvm\nlist\ndash sizes\nthen i want to you look them up for east\nus too which is where i'm based\nand then let's output that into a table\nso dash o which is the option to output\nit in the table\nthis is probably going to get us a lot\nof information right okay cool so i'm\ngoing to clear this and there's a lot in\nhere i'm like all right maybe i don't\nwant all of these like i just want to\nlook for the ones that are dc something\nright so i can do\nagain we can tab we can just use the\narrow up to sort of recall our history\nand then we can use grep right i've\nactually added this in here here more to\nthe side and i'm all right so i just\nwant\nds\nand remember here's where we're going to\nuse wild cards\nand then we're expecting some kind of\ncharacter and then an underscore and\nthen a v\ntwo and then it ends with that too oh\nhold on it looks like we didn't find\nanything\nuh that ant that starts with this how\ncome uh i did this backwards i believe\nso\nright no that's fine\nuh let's look at the output againazvm so we have dc\nwe've got\ndc2s we've got dc\nv2 we've got dc hold on we got more up\nhere i believe soah there's so much here ds\nstandard\nunderscore d s i thought we had a ds ds\nv2 i might have like put it in wrong\nhere\nuh\nlet's see everyonewe've got some it should match that i'm\nnot sure i'm pretty sure i tried this\nbefore ds underscore v all right well\nlet's figure it out live\nuh so we know we want to do\nuh and then grip table and then we\nwanted to grip only the ones that match\nthat have some sort of ds\nand\nlet's see what happens when we just do\ngrab ds okay cool uh let's pair this\nwith the awk awk and then we'll just\nprint out the\nlike specific column awk can be a\nsession completely on its own\nuh here we go print and then we only\nwant to print the third column here\nthird column here and then we'll\npipe this into the grip command here\nthen we'll see oops\nwe got to close this right here boom\nthere we go and then we see we're only\ngoing to get this column here too okay\nso we have a bunch more here\nuh say we want just the ds with\nsome sort of command some sort of uhdigit digi yes that's what i meant\nbut only one\nand then we do underscore what happens\nthere no match is found for that one\ninteresting\nuh there like that no match is found for\nds but if we wanted only the v2 ones i\nguess we could probably do something\nlike\nanything and then like a dash v2\nsomething like that not much is found\nfor that either\nuh what is the issue here is it because\ni need to do like include encapsulate\nthis like this\nlet me take a look here\nunderscore v2 like that\nah i figured it out i forgot to uh\nencapsulate them in um single quotes\nbecause i'm i'm assuming it like didn't\nrecognize this as a rejects in this\nthing but it's interesting because i\nfeel like i've done this in the cloud\nshell and it did work but anyway all\nright so now you can see\nuh output for this uh list images is\nonly the ones that are ds something yes\nyou know something but v2 right\nand that's sort of how you use grab for\nfiltering we're gonna have more examples\ndown here\num but it's i kind of want to get into\nbatch scripting but i guess i have more\nexamples here of of grep uh take a look\nat those uh and then i did like a bunch\nhere that you can sort of copy and kind\nof work with um just because i want to\nlike wrap up\ni want to respect both people's time we\nhave an hour left all right so let's\nlet's just do a little introduction into\nuh uh bash scripting and create a bash\nfile right so uh let's create a file uh\nwe're gonna use vim for this oh i guess\nwe can use now because we've used film\nbefore we're gonna create a file called\ncreate files\ndot sh\nfantastic and then i'm just going to\ncopy here this here because it's a\nlittle easier\num and then this first thing is called\nthe shebang right we're essentially just\ntelling uh the shell hey which script\nare we like which where are we what are\nwe using to execute this and essentially\nwe're just telling you hey we're using\nbash right and then we have a little\ncomment here that describes what the\nscript is doing it says say hello and\ncreate some files echo means to echo the\nmessage that's within these single\nquotes and then in this case i'm just\nsaying creating files for you then we've\ngot a loop if anyone's familiar with\nprogramming\nlooping is just doing something until\nsome sort of something ends right so for\nf\nit's just like a variable\nand and remember we can use ranges so\nfrom a through z and then from zero\nthrough five we're going to\necho hello to a file done so essentially\nwe're going to create a bunch of files\nright\nand then here what we're going to do now\nis exit and then we're going to save\nthis here and then clear this out\nand now what i'm going to do is just cat\nthat file what was it called again\ncreate file something like that right\njust to make sure we saved it correctly\ncool\nnow\nwe can't execute this so if i try to do\nuh what is this called again create\nfiles like that\nuh it'll create files for us but we\ncan't execute it without like if we\nwanted to just create underscore files\nuh actually it might no if you see it\nsays command not found create files and\nwhy is this\nuh it is because it doesn't exist in our\npath so how does bash know like you know\ni can write like ls\nuh right and i can do like a bunch of\ndifferent commands and if you install\nlike packages and stuff like that they\nmight have commands like how does bash\nknow\nwhere to look for these commands right\nso there's this thing called a path\nand it's spread like this\nor case\nall letters uppercase\nand these are all the directories where\nbash knows to go and look for things\nthat i can execute so you can see up\nhere we have like user local s bin use\nyour local bin user bin when you like\nhave scripts that you like put together\nand you want to be able to run them\ni think a good one is user dash local\nuser slash local slash bin to save this\nso we can just move this\nuh move this file which is create i will\nyou know let's actually copy create copy\ncreate files\nto\nslash user slash local slash bin you\ncould also add\na directory to your\npath but for this case we're just going\nto move it because it's better to like\nmove it\nand we're in like a directory that's\nexpecting\nyour scripts to instead of like just\nadding like a random directory to it\nright\nuh\ncan i create regular file ah we're\nprobably gonna have to use pseudo here\nwe're gonna do sudo and then what we're\ngonna do is provide the password\nalrighty so we've moved it if i do cat\nuh hold on clear\nif i do create files now\ncreate\nunderscore\nhold on\nlet me remove all these files first\nremove uh all files that just end in txt\nremove all files that end in txt like\nthat all right i have no files right\ni'm just going to remove this dear one\nas well\nremove\nuh dear one\nls fantastic\nall right so you see i have no files\nhere if i do create files create\nunderscore files now without the sh\nit should work too ah it's not working\nhuh\nwhy is that\nuh let's go back to\nuh did i not i forgot to might have\nforgotten to modify the permissions\nall right let's move into the\nuser slash local\nslash bin\nfiles and this is like a step that i\nskipped here for\ntrying to save time right um so often so\nhave you ever like installed something\non your developer machine and then they\ntell you like make sure to change the\npermissions and then you just randomly\ntype in all right chamod 755 or\nsomething like that but what you're\ndoing is changing the permissions on the\nfile right and when you do ls-l you can\nsee the files that are here for example\nwe've got no permission read write for\nthe user and then we've got execute read\nwrite for the group and things like that\npermissions and links and stuff like\nthat i'm probably going to do a\ndifferent session on that because it's a\nlittle bit more involved but that's\nessentially what you're changing too uh\nso if i go into let me list the stuff\nhere uh looks like i have a cube ctl in\nhere too so if i do chamod\n755 and then create files uh i need to\ndo sudo again because i'm in\nmy there\n755\nto create\nls cool now i should be able to do this\nuh create\nfiles but just like that\ncreate uh it's not working huh i'm\npretty sure this worked before\ninteresting let me\ndo echo path here\nand see we got user local user local bin\nis in here\nuh use your local bin user local s bin\nis also in here huh\nuh did i i added the bin in there too\nwhat is it then uh create files.sh\noh that worked there for some reason the\nextension works there but we're getting\npermission denied because we are we\ndidn't do it with sudo and the reason\nwe're going to continue permission\ntonight is because it's in a bin\ndirectory bin is where binaries and\nthings are installed so for i guess\nsafety not i guess for safety and\nsecurity purposes they require a\npassword right\nbut anyway\nthat is a very very short introduction\nto the shell scripting essentially you\nstart your files with bin bash\nand then you type in your things\nand then it'll run commands for you\nright",
  "key_phrases": [
    "massive massive massive fan",
    "many different unix shells",
    "many many flavors",
    "engineering focus role",
    "important skill set",
    "serverless service services",
    "command line interface",
    "cloud computing servers",
    "mac os things",
    "cli docker cli",
    "unix systems",
    "bash shell terminal",
    "command lines",
    "dockeruh press",
    "cloud service",
    "gui part",
    "left side",
    "popos item",
    "de facto",
    "linux servers",
    "serverless things",
    "universal language",
    "linux machines",
    "cli um",
    "text file",
    "last thing",
    "command right",
    "easiest way",
    "text-based program",
    "individual commands",
    "windows terminal",
    "physical thing",
    "shell script",
    "theory",
    "actions",
    "terms",
    "mix",
    "someone",
    "referencing",
    "stuff",
    "help",
    "something",
    "people",
    "like",
    "clies",
    "kubernetes",
    "features",
    "today",
    "times",
    "console",
    "sort",
    "example",
    "quake",
    "lot",
    "everyone",
    "sequence",
    "end",
    "standard",
    "network",
    "everything",
    "point",
    "python",
    "skills",
    "fundamentals",
    "wsl",
    "setup",
    "powershell",
    "clouds",
    "print working directory man",
    "list change directory",
    "long form right",
    "concise right",
    "windows terminal",
    "zero date",
    "full syntax",
    "first part",
    "formatting thing",
    "impressive combinations",
    "fantastic question",
    "large screen",
    "current directory",
    "etsy directory",
    "make directory",
    "cloud shell",
    "normal ls",
    "bash enthusiasts",
    "required argument",
    "command line",
    "several options",
    "hidden files",
    "terminal things",
    "man command",
    "deer options",
    "bash command",
    "powershell",
    "something",
    "account",
    "neat",
    "example",
    "dash",
    "arguments",
    "commands",
    "concept",
    "flags",
    "letter",
    "word",
    "case",
    "contents",
    "default",
    "linux",
    "dot",
    "bunch",
    "stuff",
    "everything",
    "stash",
    "sort",
    "people",
    "skills",
    "career",
    "20 years",
    "idea",
    "extent",
    "mind",
    "scripts",
    "kinds",
    "friend",
    "drivers",
    "documentation",
    "help",
    "manual",
    "lack",
    "small",
    "name",
    "directories",
    "synopsis",
    "one-liner",
    "description",
    "z account list",
    "great um documentation",
    "easy account",
    "manual page",
    "cool thing",
    "deer shell",
    "availability zone",
    "good part",
    "wild cards",
    "nano txt",
    "text file",
    "j p",
    "z cli",
    "other clients",
    "az account",
    "neat option",
    "meta characters",
    "full name",
    "argument things",
    "other clies",
    "dash dash",
    "bash commands",
    "specific examples",
    "help things",
    "arguments",
    "options",
    "right",
    "lot",
    "bunch",
    "first",
    "searches",
    "syntax",
    "summary",
    "information",
    "goal",
    "standard",
    "course",
    "openshift",
    "app",
    "groups",
    "helper",
    "chain",
    "idea",
    "docker",
    "projects",
    "companies",
    "date",
    "access",
    "vm",
    "multiple",
    "copy",
    "kind",
    "stuff",
    "symbols",
    "something",
    "extension",
    "place",
    "asterisks",
    "sequence",
    "files",
    "output",
    "uh",
    "png",
    "capital",
    "difference",
    "one two three dot png",
    "one character single character",
    "little fun fact",
    "case sensitive right",
    "scripting programming things",
    "little bit",
    "one symbol",
    "one place",
    "one digit",
    "one png",
    "one dot",
    "operating systems",
    "wild cards",
    "asterix wildcard",
    "lss l",
    "grep filtering",
    "deer works",
    "bash command",
    "most things",
    "question mark",
    "png file",
    "four letters",
    "new file",
    "deer help",
    "manual entry",
    "touch command",
    "dash l",
    "lower capital",
    "cd command",
    "man man",
    "capital letter",
    "files",
    "mind",
    "extensions",
    "linux",
    "care",
    "contents",
    "example",
    "end",
    "people",
    "asterisk",
    "zero",
    "characters",
    "bunch",
    "requirement",
    "list",
    "commands",
    "creation",
    "date",
    "brackets",
    "group",
    "sequence",
    "name",
    "kane",
    "range",
    "zwe",
    "everything",
    "Music",
    "text",
    "um",
    "luck",
    "cds",
    "directory",
    "exception",
    "extent",
    "environm",
    "standard input standard output",
    "print working directory",
    "one dot png",
    "standard error",
    "creation date",
    "little bit",
    "fancy way",
    "nano shadow",
    "nano fans",
    "popular arguments",
    "sub year",
    "subdirectory tool",
    "empty folders",
    "wild cards",
    "other one",
    "hidden files",
    "demo files",
    "text files",
    "popular options",
    "pw command",
    "current moment",
    "tier one",
    "dash p",
    "ls gear",
    "empty directories",
    "concatenate file",
    "file system",
    "tier 2 slash",
    "cd command",
    "file name",
    "information",
    "entry",
    "help",
    "majority",
    "commands",
    "permissions",
    "owner",
    "group",
    "things",
    "kind",
    "stuff",
    "terminal",
    "case",
    "variable",
    "something",
    "pwd",
    "contents",
    "screen",
    "people",
    "dxd",
    "manual",
    "page",
    "tree",
    "deer",
    "dear",
    "make",
    "subdirectories",
    "dr2",
    "handy",
    "bunch",
    "example",
    "pick",
    "usage",
    "directory gear 2 sub gear",
    "bash demo files directory",
    "normal shell environment",
    "input output direction",
    "sub directories",
    "z shell",
    "copy files",
    "places files",
    "right-click copy",
    "existing place",
    "little bit",
    "first place",
    "most distros",
    "pseudo package",
    "folder figure",
    "redirect input",
    "super user",
    "standard output",
    "current directory",
    "two deer",
    "uh machine",
    "one directory",
    "command line",
    "copy notes",
    "multiple commands",
    "root user",
    "thing",
    "wildcards",
    "subdirectory",
    "name",
    "tier",
    "descendants",
    "behinds",
    "couple",
    "directory1",
    "um",
    "dr1",
    "notesnotes",
    "jazz",
    "snapshot",
    "processes",
    "exercise",
    "moment",
    "sudo",
    "privilege",
    "system",
    "example",
    "update",
    "permission",
    "password",
    "account",
    "bunch",
    "reasons",
    "stuff",
    "record",
    "people",
    "access",
    "gps",
    "mind",
    "subdirectories",
    "way",
    "redirection",
    "power",
    "pipeline",
    "symbol",
    "source",
    "keyboard",
    "destination",
    "other",
    "screen",
    "default",
    "charac",
    "good old cat command",
    "standard error error messages",
    "right directions matter",
    "stack overflow threads",
    "standard output redirection operator",
    "user slash bin",
    "pipe operator",
    "user bin",
    "std error",
    "scd error",
    "little bit",
    "long form",
    "other one",
    "shell references",
    "dot txt",
    "two ways",
    "older systems",
    "first one",
    "bash scripting",
    "efficient way",
    "one command",
    "other command",
    "command lines",
    "cat file",
    "standard input",
    "zener output",
    "different name",
    "example cat",
    "file descriptor",
    "one file",
    "ls dash",
    "bash commands",
    "file name",
    "okay",
    "summary",
    "examples",
    "program",
    "result",
    "screen",
    "content",
    "default",
    "symbol",
    "directory",
    "process",
    "scripts",
    "binaries",
    "stuff",
    "permission",
    "Music",
    "order",
    "stdn",
    "sort",
    "something",
    "notation",
    "location",
    "links",
    "end",
    "newer",
    "ampersand",
    "mind",
    "keyboard",
    "inputs",
    "pipelines",
    "art",
    "someone",
    "concise",
    "bunch",
    "subreddits",
    "kind",
    "linux administration linux servers",
    "bad dot py",
    "common use case",
    "ke chains",
    "formatting thing",
    "cpu time",
    "python script",
    "python thing",
    "brush python",
    "grip python",
    "little ps",
    "other one",
    "ps command",
    "misbehaving process",
    "process id",
    "snapshot",
    "processes",
    "dash",
    "pipe",
    "grep",
    "daemon",
    "output",
    "everything",
    "grab",
    "input",
    "damon",
    "things",
    "example",
    "cat",
    "error",
    "fmt",
    "sort",
    "paragraphs",
    "principle",
    "lpr",
    "something",
    "paper",
    "bit",
    "cert",
    "service",
    "file",
    "nvi",
    "jokes",
    "uh",
    "vm",
    "craziness",
    "terminal",
    "ampersand",
    "python3",
    "back",
    "commands",
    "information",
    "shell",
    "fans",
    "computer",
    "lot",
    "signals",
    "default",
    "hub",
    "end",
    "skill",
    "price",
    "global regular expression print",
    "ac cli prefix",
    "specific column awk",
    "wrong column",
    "best friends",
    "vm sizes",
    "wild cards",
    "awk awk",
    "third column",
    "uhdigit digi",
    "single quotes",
    "cloud shell",
    "batch scripting",
    "little introduction",
    "shell hey",
    "kill command",
    "awk command",
    "grip command",
    "bash scripting",
    "process id",
    "great grep",
    "cool grep",
    "capable grep",
    "underscore d",
    "list images",
    "first thing",
    "filtering output",
    "dash sizes",
    "dc hold",
    "bash file",
    "ds ds",
    "one",
    "ps",
    "signal",
    "python",
    "misbehaving",
    "rest",
    "exercises",
    "something",
    "name",
    "Music",
    "example",
    "az",
    "east",
    "table",
    "option",
    "lot",
    "information",
    "arrow",
    "history",
    "side",
    "kind",
    "character",
    "ant",
    "standard",
    "sort",
    "session",
    "boom",
    "bunch",
    "match",
    "v2",
    "issue",
    "look",
    "rejects",
    "grab",
    "copy",
    "work",
    "people",
    "time",
    "hour",
    "vim",
    "film",
    "files",
    "dot",
    "shebang",
    "user local s bin use",
    "local user local bin",
    "local bin user bin",
    "local slash bin",
    "bin directory bin",
    "slash bin files",
    "good one",
    "dear one",
    "developer machine",
    "different session",
    "cube ctl",
    "security purposes",
    "short introduction",
    "shell scripting",
    "random directory",
    "different commands",
    "regular file",
    "echo path",
    "underscore files",
    "file something",
    "little",
    "comment",
    "hello",
    "message",
    "single",
    "quotes",
    "case",
    "loop",
    "programming",
    "sort",
    "variable",
    "ranges",
    "bunch",
    "exit",
    "cat",
    "bash",
    "ls",
    "packages",
    "stuff",
    "right",
    "letters",
    "directories",
    "things",
    "scripts",
    "copy",
    "pseudo",
    "sudo",
    "gonna",
    "password",
    "clear",
    "hold",
    "permissions",
    "step",
    "time",
    "type",
    "example",
    "group",
    "links",
    "reason",
    "extension",
    "binaries",
    "safety",
    "bash",
    "things",
    "commands"
  ]
}