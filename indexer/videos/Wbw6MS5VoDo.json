{
  "id": "Wbw6MS5VoDo",
  "title": "Azure Functions HTTP Trigger",
  "transcript": "hi everyone welcome to a new video today\nwe are taking a look at\nazure functions specifically the http\ntrigger a lot of you have been asking\nfor me to go video a video explaining\neach trigger and binding\nand that's a lot for me to do by myself\nluckily my good friend mark zoiker who\nis a absolute wiz with azure functions\nespecially durable functions\nand has way more experience with c and\nnet\num decided to add me to this project\nthat he's got going on called azure\nfunctions university\nit is a github repo so it's open source\nand available to anybody\nof different lessons and homework\nassignments and live streams and videos\nand\na bunch of great content for you to get\nhands-on and learn\nazure functions if you're brand new and\nmaybe even if you\nalready use functions you might find\nsomething of use there so i'll link\neverything you need to know in the\ndescription box and i think it's an\nabsolute great\nresource for you if you are looking to\nget started with functions\nthis video is sort of a summary of the\nhttp lesson that is already published\nthere's also a live stream that's about\nan hour and a half that covers\nprerequisites to get you going to\nactually develop\nazure functions locally on your machine\nand it goes to\nthe http function like it does a\nwalkthrough through that lesson as well\nso it's about an hour and a half every\nlesson is going to be less than an hour\nbut i'll also try to make these summary\nvideos all right uh first thing i'm\ngonna do\nis do ctrl shift p and we can\nselect create new project if you need to\nsearch for it you can just do\nazure functions create new project and\nhit that\nthere and i'm already in the directory\nthat i want to create it but if you have\nto create a subdirectory or something\nyou can just hit browse\ni will be doing this in c sharp i'm\ngoing to select the http trigger\nand i'm just going to call this get http\ntriggerwe'll keep the namespace simple we'll\nkeep it as company.function that's fine\naccess rights we'll set this to function\nand we'll let it create\nall right that is done creating we're\ngoing to close this here and let's take\na look at the files that get generated\nfor us\nwe have the actual c sharp class where\nthe function method exists we have the\ndot cs proj this is specific to dot\nnet and it just uh tells us which\nversion of dot net we're using and which\nversion of azure functions hosts.json\nand localsettings.json are\nfiles that will be used on the global\nlevel so for every\nfunction app that we create inside of\nthis function project\nthe settings inside of both of these\nfiles will apply to both\nor to all of those function apps host\napp is more for like global settings and\nthen local local.settings.json\nis for your app settings and\nyour connection strings and any secrets\nand such local.settings.json\nis meant to be used for local\ndevelopment and never to be pushed to\nproduction so keep that in mind\nwe can go ahead and inside of the\nrun option here on the left we can go\nahead\nand start it and we'll pay attention to\nthe output in the terminal because it\nis going to give us a url in order to\naccess our http trigger and you see here\nit says functions\nand right now we only have one get http\ntrigger which was the name we defined\nwhen we were creating the function\nand then we have get post because those\ntwo\nmethods have been set and then we have\nthe actual url\nlet's go ahead and click it and see what\nhappens\nso you see the terminal says that the\nc-sharp http trigger function processed\na request\nand then it said executed so let me move\nthe browser over here\nand you see we get this http triggered\nfunction executed successfully pass a\nname in the query string\nor in the request body for a\npersonalized response\nso if i provide a namekey value pair named gwen it says hello\ngwen this http\ntriggered function executed successfully\nif i use something like postmen we can\ncreate a\npost call here\nand provide the key value pair in the\nbody so we'll create a new one\n[Music]\ncopy the function url and\ninside we'll say post\nand headers you can make sure content\ntype\ncontent type is json\nand the body wayjust provide the nameand we'll say hps and we'll hit send\nand there you go hello gps fantastic so\nagain though it's a very very simple\nhttp trigger you could\ndeploy this to azure\nbecause it is a fully working function\nthough i don't know why you would want\nto do that\nso let's stop this and let's take a look\nat what's going on so the\nuh declaration here of the trigger it's\nhttp trigger because that's the one we\nselected authorization level was that\naccess right\nthat we selected and we selected\nfunction so it's here\nagain this is enabled for get and post\nmethod and the route is\nset to null so what is the route value\nso that value after the slash\napi here that's the route value so if we\nwere to\nchange this attribute of this value here\nto\nsomething else then that would also\nchange this here\nand by default it is set to the name of\nthe function so that's why it's set to\ngate http trigger\nthen we have this rec object here that\nwill allow us to actually access the\ninformation that is provided to us\nvia either the query or the body\nand then remember the console said hey\nthe c-sharp http trigger function\nprocessed a request\nand this string name is just going to\nquery this rec object here for the\nvalue name and we create this response\nmessage\nif we find the name is provided to us\nwe'll give this message and if not we'll\ngive this message\nnow this function is always returning an\nokay object result which\nin production might not be the best\nthing to do\nalso this function is doing both get and\npost which\nwhen you think of a microservices\narchitecture you'd want it to do\njust one specific task so we're going to\ncreate a new function\nthat'll take care of the post and we'll\nchange this one to just use get\nso that's actually really easy to do we\njust erase posts in there you've had it\nhere's a best practice tip in c sharp\nthat my friend\nmark doinker taught me and if you say\nname of\nhttp methods http\nmethods.get this is a way of\nstrong typing uh that value so instead\nof the string which can\nintroduce like you know typos and such\nwe can just use this\nand we won't have to worry about titles\nfantastic all right\nso let's save this and we're going to\ncreate a new functionctrl shift p instead of create new\nproject we're going to select azure\nfunctions create function\nhttp trigger and then we're going to\ncall this post\nhttp trigger\nand hit enter that same default\nnamespace is fine\naccess right set to function make sure\nthe namespace is the same\nokay that got created for us again it\njust creates\nthe same exact function that got created\nwith the previous\nuh wizard that we did for the get one so\nbefore we even dive in here we're going\nto need to create a class that describes\nour person\nso say person.cs we'll say namespace\nis the what is it company dot and we\nneed to make sure it matchesthere we go and then we'll say public\npublic class person\nand public string\nname get setgreat we're going to close that and and\nwe can actually\noh first thing we have to do is change\nthis here\nso we're going to say name of\nhttp\nmethods dot post\nnow keep in mind that you have you know\npost\nput delete all those but we're going to\nuse post here\nand we're actually going to change this\ntype from\nhttp request to http request message\nthat is because it has a method that is\nuseful when working with the post method\nand we probably have to add yes using\nsystem.net.http go ahead and add that\nall right since we made that change you\nsee we are getting\na couple of errors but that's fine\nwe are gonna do a couple of changes here\nso we'll say string name\nsince we no longer have access to query\nwe'll just say this is\ndefault and we want to save that\nthe key value pair that we're sending\nvia the json body\ninto this person type so what we're\ngoing to do is save ourwhoops\nperson equalsawait rec.content which is the method\nthat we are\nable to access because we're using http\nrequest\nmessage instead of http request\ndot read as async and that let's use a\ntype\nand then we'll say person bingo\nall right but remember that i said\nno matter if value is provided or not\nit's returning an ok\nobject result we don't really want that\nso we're going to change\nall of this actually and we're going to\nsay\nobject result\nresult and we also need a string\nresponse message equals default for now\nand we can say if string dot is null\nor empty oh hold on we forgot to\nassign name\nequals person.name there we go\nright so now when we send a value\nthat has name it's going to assign that\nto this\nstring name so now we can say hey is\nthere actually a value\nso if it's null or empty we'll say\nplease provide a value\nthere we go and then we'll say result\nequals new bad\nrequest object\nresults with that response message\nfantastic and if it's else\nthat means we do have a value for name\nand then we can do\nalmost the same just change\nthe string that's returnedand we'll say hey there nameand i will say hey from body that way we\ncan distinguish them hey from body\nand we'll say new okay\nobject result and then we'll returnoh goodness return result\nthere we go so now we should be able to\nexecute this so let's take a look at\nwhat happens when we run this\nnow we have two functionsthe terminal output now gives us\nfunctions the get http trigger\nget is only here it's not getting post\nand then we have that url and then we\nhave post http\ntrigger only post and then the url for\nthe post so if we open\nuh postman we should see that the get\none still works\nthe same so let's set this to get\nand then obviously there's no body\nparams will be\nname equals gps that'll say send\nand say hello gps so you know we'll\nchange that a little bit hello\ngwenperfect but what if we change this to\nwe'll create another one here\noh let's copythis and we'll set this to postand we will say oh we got to say this is\ncontent\ntype this is just some stuff we have to\nset for postman\nuh we'll say json and then the body\nwe will provide the json we'll say name\nand the name value will say gwen\nand then we'll hit send you see hello\nthere gwen from body\nso we now have two different functions\nusing two different urls\none is receiving information from the\nurl and then one's receiving from the\nbody well what we're getting\nand then we're posting right and that is\na very brief overview of how the http\ntrigger works with azure functions again\nif you want a more\nin-depth and informative lesson you will\nfind that in the azure functions\nuniversity repo\nuh follow mark he has like great\nlike tips and tricks that he shares on\non twitter uh a bunch of like azure\nfunctions content.net development\ncontent as well\ni'll link everything you need to know in\nthe description box besides that i will\nsee you\nin the next video thanks for watching",
  "key_phrases": [
    "actual c sharp class",
    "dot cs proj",
    "namekey value pair",
    "good friend",
    "absolute wiz",
    "open source",
    "different lessons",
    "homework assignments",
    "live streams",
    "great content",
    "description box",
    "a half",
    "first thing",
    "ctrl shift",
    "access rights",
    "connection strings",
    "local development",
    "run option",
    "query string",
    "personalized response",
    "content type",
    "hello gps",
    "new project",
    "new video",
    "video explaining",
    "route value",
    "function apps",
    "function url",
    "working function",
    "dot net",
    "new one",
    "authorization level",
    "app settings",
    "function project",
    "global settings",
    "http function",
    "durable functions",
    "function method",
    "summary videos",
    "http trigger",
    "request body",
    "everyone",
    "look",
    "lot",
    "binding",
    "zoiker",
    "experience",
    "university",
    "repo",
    "bunch",
    "something",
    "use",
    "everything",
    "resource",
    "hour",
    "prerequisites",
    "machine",
    "walkthrough",
    "gonna",
    "directory",
    "browse",
    "namespace",
    "company",
    "files",
    "version",
    "json",
    "localsettings",
    "secrets",
    "production",
    "mind",
    "left",
    "attention",
    "output",
    "terminal",
    "order",
    "post",
    "methods",
    "gwen",
    "Music",
    "headers",
    "nameand",
    "hps",
    "declaration",
    "slash",
    "api",
    "attribute",
    "default",
    "gate",
    "new bad request object results",
    "new okay object result",
    "new functionctrl shift",
    "best practice tip",
    "ok object result",
    "object result result",
    "goodness return result",
    "one specific task",
    "key value pair",
    "same exact function",
    "public class person",
    "public string name",
    "string response message",
    "same default namespace",
    "new project",
    "rec object",
    "microservices architecture",
    "mark doinker",
    "two functionsthe",
    "terminal output",
    "request message",
    "company dot",
    "string dot",
    "person bingo",
    "c sharp",
    "first thing",
    "hello gps",
    "trigger function",
    "person type",
    "value name",
    "json body",
    "post method",
    "information",
    "query",
    "console",
    "production",
    "care",
    "posts",
    "friend",
    "http",
    "methods",
    "way",
    "typos",
    "titles",
    "access",
    "previous",
    "wizard",
    "change",
    "mind",
    "yes",
    "couple",
    "errors",
    "content",
    "empty",
    "hold",
    "nameand",
    "postman",
    "get",
    "params",
    "stuff",
    "two different urls",
    "http trigger works",
    "two different functions",
    "functions university repo",
    "name value",
    "brief overview",
    "informative lesson",
    "description box",
    "next video",
    "gwen",
    "hello",
    "body",
    "information",
    "depth",
    "mark",
    "great",
    "tips",
    "tricks",
    "bunch",
    "content",
    "everything"
  ]
}