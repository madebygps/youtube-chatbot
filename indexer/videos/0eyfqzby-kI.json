{
  "id": "0eyfqzby-kI",
  "title": "How to explain reliable cloud architecture",
  "transcript": "when it comes to a well-architected\napplication in the cloud there are a\ncouple of pillars that we need to keep\nin mind when we're designing and one of\nthose is reliability\njust as a heads up in this video i'm\ngoing to be using architecture\napplication workload system\ninterchangeably essentially i'm trying\nto describe the thing that you're going\nto deploy to the cloud in order for your\ninfrastructure to be considered reliable\nit has to be both resilient and\navailable\nresiliency or your infrastructure being\nresilient means that it can recover from\nsome sort of failure that it encounters\nand return itself back to a fully\nfunctioning state automatically if you\nhave to manually kick off this process\nthat's not resilient\nand availability is whether a user can\naccess your application or not there's\nalso this thing called high availability\nbut we'll talk about that later in this\nvideo if you have any other cloud\nconcepts you want me to talk about let\nme know in the comments don't forget to\nlike and subscribe and all those\nyoutuber thingies all that being said hi\ni'm gps i like talking about cloud\ncomputing and welcome to a new video all\nright so let's first talk about the goal\nof reliability and let's start off with\nfor example like traditional development\non-prem you know you want your\napplication to be reliable so up front\nyou would have to purchase most likely\nthe more reliability you want the more\nhigher-end hardware that you would need\nand your goal is to minimize\nyour application going down like your\nentire application because again we're\nthinking monolith\nwhereas in the cloud\nwe now know that distributed patterns\nare a better way to realize the full\npotential of a cloud computing\nplatform\nso\nour goal is to minimize the impact of\nfailure of a single component so that's\nthe goal in both ends\nin both cases\nfailure is impossible to 100 avoid i\ndon't care if you're running your\ninfrastructure out of your closet it\nor\nat the most prestigious data center\nyou can't have a hundred percent\nreliable infrastructure it just it just\ncan't happen and of course in both\nscenarios in all scenarios\nthe more reliability you want\nthe more it's going to cost you right so\nthat's the goal of reliability let's\ntalk a little bit more about how that\nmaps to\na business requirement\nreliability itself is a very subjective\nconcept we can't really associate a\nsingle number with reliability but\nremember i mentioned that in order to\nhave a reliable infrastructure you have\nto have both\nit being resilient and available and\navailability is something that we often\nsee a metric associated with or all the\ntime and this metric is called sla\nwhich stands for service level agreement\noftentimes you'll see services say like\noh this sla for this service is\n99.99999 or 95 why not right and sla\nwill tell your customer how often they\ncan expect to be able to use your\ninfrastructure your application your\nworkload as expected\nso there's an azure example here for\nvirtual machines and there's a website\nyou can view all the slides for azure\nand i'll throw one example up on here on\nvirtual machines but yeah these this\nbusiness requirement is something that\nyou have to meet like this number that\nyou associate you have to meet or else\nyou're gonna have\nunhappy customers so in terms of\nreliability we have this number uh it's\nan sla which is associated with\navailability that's very important okay\nso no we now we know the goals of\nreliability we understand the business\nrequirement and i keep mentioning that\nin order to have reliable we have to\nhave resiliency and availability so\nwe'll talk a little bit more about those\nso we know the mindset of being in the\ncloud is we're just going to have to\ndesign for failure it's impossible to\navoid failure but that doesn't mean that\nwe have to sit around\nand wait for things to fail for us tack\nno no no no\nessentially there are two\nvery very important things that you have\nto keep in mind to obtain reliable\ninfrastructure\nthose two things are\nmonitoring and\nautomation monitoring you need to have\ninformation metrics logs\nall these kinds of things coming in from\nyour infrastructure that is deployed\nand into a dashboard into emails however\nit is easier for you to consume that\ninformation because there's no way that\nyou're going to be able to\nwell reliably detect\nprevent or predict issues without having\nthat data\nthe second part of this would be\nautomation oftentimes automations in the\ncloud will kick off depending on data\nthat's provided to you by your\ninfrastructure through your monitoring\ndashboard and whatnot\nand these two things put together\nis what enables us to have\na couple of other things i'm going to\nmention here that we need to design for\nwhen it comes to reliable infrastructure\nso this first part here is designing for\nself-healing\nyour infrastructure should be able to\nput itself back into a functioning state\nwhen it has\nbeen notified that it is failing it\ndoesn't know that it's failing without\nmonitoring data so remember i said it's\nimportant and it doesn't know which\nprocess to kick off to put itself back\ninto\na functioning state without automation\nso you need those two things you cannot\nhave self healing infrastructure without\nmonitoring without automation alongside\ndesigning for self healing you also have\ndesigning for redundancy\nredundancy or for your infrastructure to\nbe redundant it needs to be able to\nroute around failure so as your\ninfrastructure is self-healing it might\nbe down for a few minutes\nsomething might fail completely and it\nwon't be able to put itself up\nyou need to be able to route around that\nfailure so a really easy example here to\nuse is a load balancer in virtual\nmachines so let's say i have five\nvirtual machines and i have a load\nbalancer in front of them\nthe virtual machines have health checks\nthat are reporting to the load balancer\nand the load balancer detects that one\nmachine is down\nit's in a stop\nrouting traffic to that machine and\ndistribute that traffic amongst the\nother virtual machines as soon as that\nmachine says hey i'm back up ready to go\nthe load balancer will then\nverify with the health check it's backup\nback normal business and what so right\nagain this is thanks to monitoring and\nautomation so we need we know we need to\ndesign for self-healing and we know we\nneed to design for redundancy and there\nare a few more things here we need to\ncover\nyeah the next thing i want to mention is\nscaling your infrastructure should be\nable to scale itself in parallel\nhorizontal growth you're not supposed to\nscale an individual one virtual machine\nagain we'll stick to the virtual machine\nexample here\nyou need to be able to grab that virtual\nmachine and replicate it and then have\nessentially various units of that\nmachine\nso it can match the demand of traffic\nonce traffic is back to normal it should\nscale back in\nparallel horizontal growth is the key to\nscaling correctly not individually okay\nand again that scaling will happen\nbecause of monitoring and because of\nautomation the last thing i wanted to\nadd here is of course\nhigh availability so let's say you have\nall these things implemented you've got\nyour redundancy you've got your design\nfor self-healing you've got everything\nit scales properly and whatnot\nbut if all of this lives in a single in\na single physical location like one\navailability zone for example when it\ncomes to azure if that goes down\nthen\nyou out of luck right so making your\ninfrastructure it's it's essentially is\ngoing to be available\nwith whatever uptime or whatever sla\nthat you're saying but to improve that\nnumber and to make it highly available\nto make your infrastructure highly\navailable you need to take advantage of\ndifferent geographies different\nlocations different availability zones\ndifferent regions different cloud\nplatforms we'll call them these like\nphysical locations\nwith different names and sometimes\nspecific services will have\non top of these different geographies\nlocations availability zones itself\nsettings that you can adjust as well to\nimprove your high availability so\ntaking it from available to highly\navailable will actually require you to\nhave it physically located in different\nplaces that way if some sort of\nfailure happens with one location\nyou'll be fine because you have a\ndifferent location right so this was a\nbrief summary of some concepts when it\ncomes to reliability in cloud computing\ninfrastructure if there are any other\nconcepts you want me to talk about leave\nthem in the comments don't forget to\nlike and subscribe and i will see you in\nthe next one i'll have some recommended\nreading\nin the description but i'm actually a\nbig fan of this architecture kind of\nstuff so\nyou know give it a read all right i'll\nsee you next video",
  "key_phrases": [
    "architecture application workload system",
    "service level agreement",
    "information metrics logs",
    "prestigious data center",
    "other cloud concepts",
    "cloud computing platform",
    "other things",
    "youtuber thingies",
    "traditional development",
    "higher-end hardware",
    "single component",
    "hundred percent",
    "business requirement",
    "subjective concept",
    "virtual machines",
    "unhappy customers",
    "second part",
    "first part",
    "important things",
    "entire application",
    "functioning state",
    "monitoring data",
    "reliable infrastructure",
    "two things",
    "new video",
    "single number",
    "one example",
    "automation monitoring",
    "monitoring dashboard",
    "cases failure",
    "couple",
    "pillars",
    "mind",
    "reliability",
    "heads",
    "order",
    "resiliency",
    "sort",
    "process",
    "availability",
    "user",
    "comments",
    "gps",
    "goal",
    "prem",
    "monolith",
    "whereas",
    "patterns",
    "way",
    "full",
    "potential",
    "impact",
    "ends",
    "closet",
    "course",
    "scenarios",
    "maps",
    "something",
    "time",
    "services",
    "sla",
    "website",
    "slides",
    "terms",
    "design",
    "kinds",
    "emails",
    "issues",
    "automations",
    "self-healing",
    "different geographies locations availability zones",
    "individual one virtual machine",
    "different availability zones",
    "one availability zone",
    "different cloud platforms",
    "cloud computing infrastructure",
    "other virtual machines",
    "parallel horizontal growth",
    "single physical location",
    "self healing infrastructure",
    "physical locations",
    "one location",
    "high availability",
    "different location",
    "different regions",
    "different names",
    "one machine",
    "functioning state",
    "load balancer",
    "health checks",
    "normal business",
    "various units",
    "last thing",
    "specific services",
    "brief summary",
    "other concepts",
    "big fan",
    "next thing",
    "next video",
    "two things",
    "easy example",
    "process",
    "automation",
    "monitoring",
    "redundancy",
    "route",
    "failure",
    "minutes",
    "something",
    "use",
    "five",
    "front",
    "stop",
    "traffic",
    "backup",
    "design",
    "self-healing",
    "cover",
    "demand",
    "key",
    "scaling",
    "course",
    "everything",
    "luck",
    "uptime",
    "sla",
    "number",
    "advantage",
    "settings",
    "sort",
    "reliability",
    "leave",
    "comments",
    "reading",
    "description",
    "architecture",
    "stuff"
  ]
}