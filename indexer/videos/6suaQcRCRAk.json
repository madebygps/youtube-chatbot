{
  "id": "6suaQcRCRAk",
  "title": "An introduction to Azure Durable Functions",
  "transcript": "all right welcome everybody to another\nvideo today we're going to be looking at\nan introduction to a sure durable\nfunctions durable functions is an\nextension built on top of azor functions\nand it gives you the ability to define\nhow multiple individual functions can be\norchestrated to work together in a\nworkflow the accession takes care of a\nnumber of things for us a scalability it\nmaintains execution position of the\nworkflow it knows when to execute the\nnext function it can replay actions it\nprovides workflow monitoring workflow\nstate storage amongst a number of other\nthings now what can we use durable\nfunctions for well we can implement a\nvariety of patterns like an async HTTP\nAPI if you have a workflow that requires\nhuman interaction you can use durable\nfunctions to create that workflow\nchained functions\nFany and fan-out pattern the\npossibilities are endless really if you\nthink about it if you try to implement\nthese patterns without durable functions\nyou would have a bad time it would be\ncomplex it would be a very error-prone\nbecause you would have to manually\nmanage each one of these checkpoints so\nluckily the extra functions team has our\nback and has provided durable functions\nfor us to work with so that's enough\ntheory let's just create a project\nenvious code so let's switch over to the\nscreen let's create a folder you just\ncall it durable func demo and then we're\ngoing to open that folder up and vs code\nlet's go ahead and create a new functioninside out of our current directory is\nfine I'm going to be using c-sharp and\nyour template you want to make sure you\nselect durable functions orchestration\nand the default name is fine name space\ndefault\nit's fine select storage account I'm\ngonna create a new storage account\ndurable funk demo GPS oh it is already\nsi how about that si there we go and I'm\ngonna create a new resource group\nterrible funk demo GPS resource group\nawesome East us - alright what we're\ngonna do before we dive into actually\nexplaining the template that gets\ncreated I'm going to create two classes\nwe're gonna need this for the example\nthat we're going to be creating so let's\ngo ahead and create a new class here\nwe're gonna call it employee and we're\njust going to describe it public class\nemployee and our employee has a ID and\nour employee also has a name we could\nadd more but just to keep it simple and\nwe're also going to create a class\npublic static oh no name name oh you\nknow what let's add email to public\nstring email awesome okay and let's save\nthat and we're gonna create another file\nhere that's called employees request and\nin here we're going to put a class\nemployee ease request and in here we're\njust gonna create a list public list of\ntype employee and it's gonna be called\nemployees and get the getters in the\nsetters awesome and we need to import\nperfect so let's save that public string\nawesome so we can just close these two\nwe're going to need them later but let's\nnot pay attention to them right now so\nyou can see there's actually quite a bit\nof code that gets created when you\ncreate this specific template in Azure\nfunctions so let's scroll down to the\nbottom and look at them individually the\nfirst one you can see is a durable\nclient this is the type of durable\nfunction that works as the entry point\nso if you're familiar with other\nfunctions you know that they get\ntriggered by something that could be a\nblob a cue message in HTTP trigger etc\nso this is the function that gets\ntriggered there are actually 4 logical\ntypes of functions in durable functions\nthere's client activity orchestration\nand entity we're not going to be using\nentity in this video I'll save that for\na later video all right so again let's\ntake a look at the code in here so we\nsee that this first line is calling\nsomething that's called a start new\nasync and it has two parameters so\nwhat's actually going on here is it's\nkicking off whatever orchestration is\ndefined in here with this data that it\ncan pass on we receive an instance ID\nwhich gets returned from this method and\nthen what gets returned to whoever\ncalled whoever's triggered this method\nis an HTTP response message that\nresponds message contains a lot of\nuseful information for the end client so\nthey can get some status on the\norchestration and monitoring information\non New York and the orchestration but\nwe'll take a look at that once we get\nthere we're actually going to edit this\nmethod a little bit so we're gonna be\nsending some JSON when we trigger the\nfunction so in the client function here\nwe're going to actually have to receive\nthat serve me do to our data equals\nlet's see if I remember this so I think\nit's a wait yeah we do we request\ntense read as a sink okay it's a type\nemployee request yes there we go perfect\nso we're just going to be getting the\nJSON that we send and then we move on so\nwhat gets called here our orchestration\nfunctions so let's move up to the top\nthis logical type is the one that is in\ncharge of defining the workflow defining\nwhich activity functions gets called so\nif we see here we can see three calls\nthat look pretty much the same they're\ncalling the same activity function\nexcept the data that gets passed in is\ndifferent each time right all right so\nhere since we passed in the data from\nthe client we need to receive it somehow\nso we're gonna create employee's request\nwhich is going to equal just the data\nand we can receive the input via this\ncontext keyword here so we can do\ncontext dot get input and this is going\nto be of type employee request and\nperfect there we go so now the data that\nwas passed on from oh I forgot to send\nit here so the data was passed on here\nto this orchestration is being received\nin this line here also we have a list\nhere but I'll explain that as we go bear\nwith me I will get to it alright so\nsince this is a list as well we need to\nloop through it so what we're going to\ndo is for each var employee in data dot\nemployees and then just loop through it\nokay so what I'm actually going to do is\ndelete two of these and I'm going to\ndelete this comment here and I'm\nactually just going to move this line\ninto this loop are already so what is\ngoing on here it looks like to this list\nthat we that's declared up here we're\nadding whatever gets returned from this\nactivity function but we don't want to\nsend this hard-coded data we just want\nto\nsend in the data that we got from the\ninput here so what we're gonna do is\njust send in employee dot that's just\nyour name to keep it super simple rightso this is going to get executed however\nmany records of JSON we have so if we\nsend to employees it's going to get\nexecuted twice obviously because it's\ngoing it's looping through the list so\nwe're also going to remove this year\nbecause this comment no longer makes\nsense so from here the orchestrator says\nokay it looks like I have to execute\nthis activity function let's go look at\nthat activity function and see what it\ndoes\nalright so we see we have our say hello\nactivity function here and it's\nreceiving a string which is being passed\non here because again the orchestrator\nis calling this activity function the\nactivity function of this name provided\nthis information so to the console\nsaying hello to whatever variable gets\npassed in here it's going to print out\nand then we're simply returning whatever\nit gets passed into this variable here\nso if I were to send JSON that says\nemployee name\nGweneth employee name sugar this is\ngonna go through here and it's basically\ngonna say hello saying hello to Gweneth\nthen returns hello Gweneth and adds that\nto our list here so let's execute all of\nthis and see what I'm talking about\nlet's go to run that here we go alright\nso we need this URL and we're going to\ntrusty postman and we're gonna create a\nnew request here it's type post and we\nneed to make sure that it is JSON and we\nneed to send it some so I asked some\nshort data because I want to show you\nthe monitoring that we can do let's go\nback here and raw all right so let's\ntake a look so let's send this request\nand see what happens so you see we get\nreturned a bunch of you our eyes I'm not\ngoing to go into them all specifically\nthe one that matters for this example is\nthis one this is steadies status query\nget you are\nso if we actually send a request to that\njust to see what it's all about we\nactually get some useful information\nhere we get an instance ID a runtime\nstatus it tells us if it's running or\nits completed or if there's been some\nsort of error at the moment its\ncompleted and we get the input that we\nsent and we also get the output so\nremember I said in here we have this\nlist and then each time there's a record\nthat it loops into it just gets saved to\nthe list with hello that's the same that\nwe're getting here now let's try sending\nmore JSON than just two records or three\nrecords alright let's go back into here\nand let's hit send again let's go to the\nURI provides to check status and hit\nSend so what's different this time is\nsince it's longer we have the runtime\nstatus isn't set to complete it set to\nrunning because it's still running if we\nlook at the output you can say you can\nsee it says null because there's no\noutput yet let's go into the function\nand you can see it's going through all\nthose it's printing out the name or\nlogging to console the name and this\nshould be done in a few seconds again if\nwe were to hit Send it's oh it's just\ncompleted right now it would have said\nrunning if I hit it maybe two seconds\nbefore but it's completed now we can see\nwe have all the JSON and if we take a\nlook at outputs you can see we have all\nthe outputs here all right so that was\nmy very brief introduction to azure\ndurable functions the important part I\nthink to fully start grasping what\nfunctions are is it's just an\norchestration of a workflow it allows\nyou to piece a bunch of different\nfunctions together and it really takes a\nlot of the management and administration\nwork that you have to do as far as\nworrying about state and storage and\nwhere you are in the workflow and you\ncan just work on the logic and it also\nprovides a lot of useful information\nlike the status that we saw there the\noutput\nand the ID and all that stuff so I'm\ngoing to be working on actually putting\ntogether few more complex or complete\nexamples and so I can explain it a\nlittle better but I did want to just\nthrow out an introduction video because\nthis topic has been a lot of fun for me\nto actually dive into anyway thank you\nfor watching this video\nI appreciate all the feedback and\nsupport that I've been getting and I'm\ndefinitely gonna be creating more if you\nhave any topics you'd like to see me\ncover as far as really anything as\nyou're related I dip my toes into a lot\nof different areas Vasher I'd like to\nhear them so leave them in the comments\nor you can hit me up on Twitter I'm made\nby GPS Instagram made by GPS and yeah I\nhope everyone's staying safe and healthy\nand yeah I will see you in the next\nvideo",
  "key_phrases": [
    "new resource group terrible funk demo GPS resource group",
    "new storage account durable funk demo GPS",
    "fine name space default",
    "async HTTP API",
    "list public list",
    "multiple individual functions",
    "extra functions team",
    "sure durable functions",
    "HTTP response message",
    "employee ease request",
    "public string email",
    "client activity orchestration",
    "durable functions orchestration",
    "new functioninside",
    "New York",
    "public class employee",
    "new class",
    "state storage",
    "workflow monitoring workflow",
    "default name",
    "durable client",
    "HTTP trigger",
    "public static",
    "monitoring information",
    "employee request",
    "name name",
    "end client",
    "azor functions",
    "chained functions",
    "Azure functions",
    "orchestration functions",
    "execution position",
    "human interaction",
    "bad time",
    "current directory",
    "two classes",
    "entry point",
    "cue message",
    "4 logical types",
    "first line",
    "two parameters",
    "useful information",
    "tense read",
    "client function",
    "other functions",
    "next function",
    "type employee",
    "first one",
    "instance ID",
    "specific template",
    "envious code",
    "everybody",
    "video",
    "introduction",
    "extension",
    "top",
    "ability",
    "accession",
    "care",
    "number",
    "things",
    "actions",
    "variety",
    "patterns",
    "Fany",
    "possibilities",
    "checkpoints",
    "theory",
    "project",
    "screen",
    "folder",
    "sharp",
    "East",
    "example",
    "file",
    "employees",
    "getters",
    "attention",
    "bit",
    "bottom",
    "something",
    "entity",
    "look",
    "data",
    "method",
    "lot",
    "status",
    "JSON",
    "wait",
    "sink",
    "charge",
    "Gweneth employee name sugar",
    "steadies status query",
    "var employee",
    "employee dot",
    "three calls",
    "context keyword",
    "context dot",
    "simple rightso",
    "many records",
    "trusty postman",
    "instance ID",
    "runtime status",
    "two records",
    "three records",
    "brief introduction",
    "important part",
    "same activity",
    "employee request",
    "activity function",
    "tivity functions",
    "type post",
    "useful information",
    "new request",
    "data dot",
    "hard-coded data",
    "short data",
    "client",
    "input",
    "orchestration",
    "line",
    "list",
    "employees",
    "comment",
    "loop",
    "JSON",
    "sense",
    "orchestrator",
    "say",
    "string",
    "console",
    "hello",
    "variable",
    "URL",
    "monitoring",
    "look",
    "bunch",
    "eyes",
    "one",
    "example",
    "sort",
    "error",
    "moment",
    "output",
    "URI",
    "logging",
    "seconds",
    "workflow",
    "different",
    "lot",
    "management",
    "administration",
    "state",
    "storage",
    "useful information",
    "different areas",
    "introduction video",
    "next video",
    "GPS Instagram",
    "workflow",
    "logic",
    "lot",
    "status",
    "output",
    "stuff",
    "examples",
    "topic",
    "fun",
    "feedback",
    "support",
    "cover",
    "toes",
    "Vasher",
    "comments",
    "Twitter",
    "everyone"
  ]
}